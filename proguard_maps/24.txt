com.chunkmapper.BoundedPointManager -> com.chunkmapper.a:
    java.util.ArrayList pointsFinished -> a
    java.util.HashSet pointsAssigned -> b
    double[] nesw -> c
    java.io.File store -> d
    com.chunkmapper.Point currentPlayerPosition -> e
    com.chunkmapper.interfaces.MappedSquareManager mappedSquareManager -> f
    boolean isLiveMode -> g
    com.chunkmapper.Point getCurrentPlayerPosition() -> a
    com.chunkmapper.Point readPosition(java.io.File) -> d
    java.util.HashSet getNewPoints$25232ef6(java.io.File,com.chunkmapper.Point,com.chunkmapper.interfaces.PlayerIconManager) -> a
    void updateStore(com.chunkmapper.Point) -> a
    void setValid(java.io.File) -> a
    boolean checkValid(java.io.File) -> b
    boolean checkSupervalid(java.io.File) -> c
    byte[] readFully(java.io.InputStream) -> a
    byte[] inflate(java.io.InputStream) -> b
    com.chunkmapper.parser.OverpassObject getObject(int,int) -> a
    void setLive() -> b
    java.lang.String readLine(java.lang.String,java.lang.Object[]) -> a
    void writeLevelDat(java.io.File,java.lang.String) -> a
    void spitProperties(java.lang.String,java.io.File) -> a
    com.chunkmapper.nbt.CompoundTag readCompressed(java.io.InputStream) -> c
    void writeCompressed(com.chunkmapper.nbt.CompoundTag,java.io.OutputStream) -> a
    void write(com.chunkmapper.nbt.CompoundTag,java.io.DataOutput) -> a
    byte[][][] getBlockLights(byte[][][]) -> a
com.chunkmapper.GameMetaInfo -> com.chunkmapper.b:
    java.io.File store -> d
    com.chunkmapper.Point rootPoint -> a
    int numChunksMade -> e
    int verticalExaggeration -> b
    boolean isNew -> c
    void save() -> b
    void incrementChunksMade() -> a
com.chunkmapper.ManagingThread -> com.chunkmapper.c:
    double lat -> a
    double lon -> b
    java.io.File gameFolder -> c
    com.chunkmapper.interfaces.MappedSquareManager mappedSquareManager -> d
    com.chunkmapper.interfaces.PlayerIconManager playerIconManager -> e
    com.chunkmapper.admin.GlobalSettings globalSettings -> f
    com.chunkmapper.interfaces.GeneratingLayer generatingLayer -> g
    com.chunkmapper.writer.RegionWriter regionWriter -> h
    com.chunkmapper.PostingThread postingThread -> i
    boolean networkProblems -> j
    java.lang.Object networkProblemsGuard -> k
    void setNetworkProblems() -> a
    boolean hasNetworkProblems() -> b
    void clearNetworkProblems() -> c
    java.io.File prepareDir(java.io.File,boolean) -> a
    void run() -> run
    void blockingShutDown(com.chunkmapper.ManagingThread,boolean) -> a
com.chunkmapper.Point -> com.chunkmapper.d:
    int z -> a
    com.chunkmapper.Point getRegionPoint(int,int) -> a
    int compareTo(com.chunkmapper.Point) -> a
    int compareTo(java.lang.Object) -> compareTo
com.chunkmapper.PointManagerImpl -> com.chunkmapper.e:
    java.util.ArrayList pointsFinished -> a
    java.util.HashSet pointsAssigned -> b
    java.util.ArrayList refreshPoints -> c
    java.io.File store -> d
    com.chunkmapper.Point currentPlayerPosition -> e
    com.chunkmapper.interfaces.MappedSquareManager mappedSquareManager -> f
    com.chunkmapper.admin.GlobalSettings globalSettings -> g
    com.chunkmapper.Point getCurrentPlayerPosition() -> a
    com.chunkmapper.Point readPosition(java.io.File) -> a
    java.util.HashSet getNewPoints$25232ef6(java.io.File,com.chunkmapper.Point,com.chunkmapper.interfaces.PlayerIconManager) -> a
    void updateStore(com.chunkmapper.Point) -> a
com.chunkmapper.PostingThread -> com.chunkmapper.f:
    java.util.HashSet posted -> a
    java.io.File regionDir -> b
    java.io.File store -> c
    com.chunkmapper.Point rootPoint -> d
    void run() -> run
    void spit() -> a
    com.chunkmapper.Point access$000(com.chunkmapper.PostingThread) -> a
com.chunkmapper.PostingThread$FilePoint -> com.chunkmapper.g:
    java.io.File f -> a
    com.chunkmapper.Point p -> b
    com.chunkmapper.Point relp -> c
com.chunkmapper.Tasker -> com.chunkmapper.h:
    java.util.concurrent.ExecutorService executorService -> b
    java.util.concurrent.LinkedBlockingQueue taskQueue -> c
    java.util.HashSet pointsAdded -> a
    void blockingShutdownNow() -> a
    void addTask(int,int) -> a
    com.chunkmapper.Point getTask() -> b
    void addTask(com.chunkmapper.Point) -> a
    void doTask(com.chunkmapper.Point) -> b
com.chunkmapper.Tasker$1 -> com.chunkmapper.i:
    java.lang.String val$threadName -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.chunkmapper.Tasker$Task -> com.chunkmapper.j:
    com.chunkmapper.Tasker this$0 -> a
    void run() -> run
com.chunkmapper.Test -> com.chunkmapper.Test:
    void main(java.lang.String[]) -> main
com.chunkmapper.Zip$InputBuffer -> com.chunkmapper.k:
    int bytesRead -> a
    byte[] data -> b
com.chunkmapper.admin.BucketInfo -> com.chunkmapper.a.a:
    java.util.HashMap map -> a
    boolean allowLive() -> a
    boolean mustUpgrade() -> b
    boolean versionSupported() -> c
    boolean spUpgradeAvailable() -> d
    java.lang.String imageEndpoint() -> e
    boolean initMap() -> f
com.chunkmapper.admin.FeedbackManager -> com.chunkmapper.a.b:
    java.io.ByteArrayOutputStream loggingStream -> b
    java.util.logging.StreamHandler streamHandler -> a
    java.lang.String getProperties() -> a
    void submitFeedback(java.util.List) -> a
com.chunkmapper.admin.GlobalSettings -> com.chunkmapper.a.c:
    boolean isLive -> d
    int verticalExaggeration -> e
    boolean gaiaMode -> a
    boolean refreshNext -> b
    boolean nz -> c
    boolean isLive() -> a
    int getVerticalExaggeration() -> b
    void setIsLive(boolean) -> a
    void setVerticalExaggeration(int) -> a
    java.lang.String toString() -> toString
com.chunkmapper.admin.MyLogger -> com.chunkmapper.a.d:
    java.util.logging.Logger LOGGER -> a
    boolean[] specialFlags -> b
    void specialLog(com.chunkmapper.admin.MyLogger$SpecialLog) -> a
    java.lang.String printException(java.lang.Throwable) -> a
com.chunkmapper.admin.MyLogger$SpecialLog -> com.chunkmapper.a.e:
    com.chunkmapper.admin.MyLogger$SpecialLog CONTROLS -> a
    com.chunkmapper.admin.MyLogger$SpecialLog GLOBE -> c
    int val -> b
    com.chunkmapper.admin.MyLogger$SpecialLog[] $VALUES -> d
    com.chunkmapper.admin.MyLogger$SpecialLog[] values() -> a
com.chunkmapper.admin.PreferenceManager -> com.chunkmapper.a.f:
    java.io.File Cache -> a
    java.util.HashMap data -> b
    void setOrePrefs() -> a
    int getInt(java.lang.String) -> a
    void activateOrePrefs() -> b
    void spit() -> k
    boolean getNoPurchaseShown() -> c
    void setNoPurchaseShown() -> d
    boolean getIgnoreUpgrade() -> e
    void setIgnoreUpgrade() -> f
    boolean getIgnoreFeedback() -> g
    void setIgnoreFeedback() -> h
    void setAllowUsageReports() -> i
    boolean getAllowUsageReports() -> j
com.chunkmapper.admin.Utila -> com.chunkmapper.a.g:
    java.lang.String VERSION -> a
    java.io.File CACHE -> b
    java.io.File MINECRAFT_DIR -> c
    java.io.File customDirStore -> d
    int OS_TYPE$3221a23 -> e
    boolean isMatt() -> a
    java.lang.String readVersion() -> c
    java.lang.String slurp(java.io.File) -> b
    void spit(java.io.File) -> a
    void clearCache() -> b
com.chunkmapper.admin.Utila$1 -> com.chunkmapper.a.h:
    int[] $SwitchMap$com$chunkmapper$admin$Utila$OSType -> a
com.chunkmapper.admin.Utila$OSType -> com.chunkmapper.a.i:
    int WIN$3221a23 -> a
    int MAC$3221a23 -> b
    int OTHER$3221a23 -> c
    int[] $VALUES$679eb48 -> d
    int[] values$81833a9() -> a
com.chunkmapper.binaryparser.FileContents -> com.chunkmapper.b.a:
    java.util.ArrayList nodes -> a
    java.util.Collection ways -> b
    java.util.Collection relations -> c
    java.lang.String toString() -> toString
    void append(com.chunkmapper.binaryparser.FileContents) -> a
com.chunkmapper.binaryparser.OsmosisParser -> com.chunkmapper.b.b:
    java.util.HashMap lockMap -> b
    java.lang.Object masterLock -> c
    org.apache.http.impl.client.DefaultHttpClient httpclient -> d
    java.util.concurrent.ConcurrentHashMap cache2 -> e
    java.util.ArrayList rectangles -> f
    java.lang.Object key -> g
    java.io.File CACHE -> a
    void flushCache() -> a
    void shutdown() -> b
    java.net.URL getLock(java.net.URL) -> a
    com.chunkmapper.parser.OverpassObject getObject(int,int) -> a
    void setRectangles() -> c
    java.util.ArrayList getRectangles() -> d
    com.chunkmapper.binaryparser.FileContents readFile(java.net.URL) -> b
com.chunkmapper.chunk.Chunk -> com.chunkmapper.c.a:
    int xPos -> n
    int zPos -> o
    int abschunkx -> a
    int abschunkz -> b
    int x0 -> c
    int z0 -> d
    int xr -> e
    int zr -> f
    java.util.Random RANDOM -> g
    java.awt.Rectangle bbox -> h
    long LastUpdate -> p
    byte TerrainPopulated -> q
    byte[] Biomes -> i
    int[][] heights -> r
    com.chunkmapper.nbt.ListTag TileEntities -> j
    com.chunkmapper.nbt.ListTag Entities -> k
    int[] HeightMap -> s
    byte[][][] Blocks -> l
    byte[][][] Data -> m
    int getHeights(int,int) -> a
    void setBlock(int,int,int,byte) -> a
    void setBoth(int,int,int,byte,byte) -> a
    int[][] defaultHeights() -> b
    com.chunkmapper.nbt.CompoundTag getTag() -> a
    int getMaxBlock(int,int) -> b
com.chunkmapper.column.AbstractColumn -> com.chunkmapper.d.a:
    java.util.Random RANDOM -> a
    int absx -> b
    int absz -> c
    int h -> d
    com.chunkmapper.enumeration.LenteTree lenteTree -> e
    boolean IS_URBAN -> f
    boolean IS_FOREST -> g
    boolean HAS_WATER -> h
    boolean HAS_ANIMALS -> i
    byte biome -> j
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
    void addColumn(com.chunkmapper.chunk.Chunk,boolean,boolean) -> a
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.Bare -> com.chunkmapper.d.b:
    byte surfaceType -> k
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.BroadleafEvergreen -> com.chunkmapper.d.c:
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.ClosedBroadleafDeciduous -> com.chunkmapper.d.d:
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.ClosedNeedleleafEvergreen -> com.chunkmapper.d.e:
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.Coast -> com.chunkmapper.d.f:
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.CroplandWithVegetation -> com.chunkmapper.d.g:
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.FloodedGrassland -> com.chunkmapper.d.h:
    boolean hasWater -> k
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.Foreshore -> com.chunkmapper.d.i:
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.ForestShrublandWithGrass -> com.chunkmapper.d.j:
com.chunkmapper.column.FreshFloodedForest -> com.chunkmapper.d.k:
    boolean hasWater -> k
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.GrassWithForestShrubland -> com.chunkmapper.d.l:
com.chunkmapper.column.Grassland -> com.chunkmapper.d.m:
com.chunkmapper.column.IrrigatedCrops -> com.chunkmapper.d.n:
    boolean hasWater -> k
com.chunkmapper.column.Lake -> com.chunkmapper.d.o:
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.MixedBroadNeedleleaf -> com.chunkmapper.d.p:
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.NoData -> com.chunkmapper.d.q:
    byte surfaceType -> k
    com.chunkmapper.math.Piecewise surfaceTemp -> l
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.Ocean -> com.chunkmapper.d.r:
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.OpenBroadleafDeciduous -> com.chunkmapper.d.s:
com.chunkmapper.column.OpenNeedleleaf -> com.chunkmapper.d.t:
com.chunkmapper.column.Orchard -> com.chunkmapper.d.u:
    int treeHeight -> k
    boolean hasTree -> l
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.RainfedCrops -> com.chunkmapper.d.v:
    int farmType$1f8c7d88 -> k
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.RainfedCrops$2 -> com.chunkmapper.d.w:
    int[] $SwitchMap$com$chunkmapper$enumeration$FarmType -> a
com.chunkmapper.column.River -> com.chunkmapper.d.x:
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.SalineFloodedForest -> com.chunkmapper.d.y:
    boolean hasWater -> k
    int treeHeight -> l
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.Shrubland -> com.chunkmapper.d.z:
    void addTree(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.column.Snow -> com.chunkmapper.d.aa:
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.SparseVegetation -> com.chunkmapper.d.ab:
com.chunkmapper.column.Urban -> com.chunkmapper.d.ac:
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.column.VegetationWithCropland -> com.chunkmapper.d.ad:
com.chunkmapper.column.Vineyard -> com.chunkmapper.d.ae:
    void addColumn(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.downloader.Downloader -> com.chunkmapper.e.a:
    org.apache.http.impl.client.DefaultHttpClient getHttpClient() -> c
com.chunkmapper.downloader.Downloader$1 -> com.chunkmapper.e.b:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.chunkmapper.downloader.Downloader$2 -> com.chunkmapper.e.c:
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.chunkmapper.downloader.OverpassDownloader -> com.chunkmapper.e.d:
    org.apache.http.impl.client.DefaultHttpClient httpclient -> a
    java.lang.String generalQuery -> b
    void shutdown() -> a
    java.util.ArrayList getLines$5dab2ec7(int,int) -> a
    java.util.ArrayList doGetLines(java.lang.String,int,int) -> a
    java.lang.String getQuery(java.lang.String) -> a
com.chunkmapper.enumeration.Block -> com.chunkmapper.f.a:
    com.chunkmapper.enumeration.Block Air -> a
    com.chunkmapper.enumeration.Block Stone -> b
    com.chunkmapper.enumeration.Block Grass -> c
    com.chunkmapper.enumeration.Block Dirt -> d
    com.chunkmapper.enumeration.Block Cobblestone -> e
    com.chunkmapper.enumeration.Block Planks -> f
    com.chunkmapper.enumeration.Block Sapling -> S
    com.chunkmapper.enumeration.Block Bedrock -> g
    com.chunkmapper.enumeration.Block Water -> h
    com.chunkmapper.enumeration.Block Lava -> T
    com.chunkmapper.enumeration.Block Sand -> i
    com.chunkmapper.enumeration.Block Gravel -> j
    com.chunkmapper.enumeration.Block Gold_Ore -> k
    com.chunkmapper.enumeration.Block Iron_Ore -> l
    com.chunkmapper.enumeration.Block Coal_Ore -> m
    com.chunkmapper.enumeration.Block Logs -> U
    com.chunkmapper.enumeration.Block Leaves -> n
    com.chunkmapper.enumeration.Block Sponge -> V
    com.chunkmapper.enumeration.Block Glass -> W
    com.chunkmapper.enumeration.Block Lapis_Lazuli_Ore -> X
    com.chunkmapper.enumeration.Block LL_Block -> Y
    com.chunkmapper.enumeration.Block Dispenser -> Z
    com.chunkmapper.enumeration.Block Sandstone -> o
    com.chunkmapper.enumeration.Block Note_Block -> aa
    com.chunkmapper.enumeration.Block Bed -> ab
    com.chunkmapper.enumeration.Block Wool -> p
    com.chunkmapper.enumeration.Block Yellow_Flower -> ac
    com.chunkmapper.enumeration.Block Red_Flower -> ad
    com.chunkmapper.enumeration.Block Brown_Mushroom -> ae
    com.chunkmapper.enumeration.Block Red_Mushroom -> af
    com.chunkmapper.enumeration.Block Gold_Block -> q
    com.chunkmapper.enumeration.Block Iron_Block -> ag
    com.chunkmapper.enumeration.Block Double_Slab -> ah
    com.chunkmapper.enumeration.Block Half_Slab -> ai
    com.chunkmapper.enumeration.Block Bricks -> aj
    com.chunkmapper.enumeration.Block TNT -> ak
    com.chunkmapper.enumeration.Block Bookshelf -> r
    com.chunkmapper.enumeration.Block Mossy_Cobblestone -> al
    com.chunkmapper.enumeration.Block Obsidian -> am
    com.chunkmapper.enumeration.Block Torch -> an
    com.chunkmapper.enumeration.Block Fire -> ao
    com.chunkmapper.enumeration.Block Monster_Spawner -> ap
    com.chunkmapper.enumeration.Block Wooden_Steps -> aq
    com.chunkmapper.enumeration.Block Chest -> ar
    com.chunkmapper.enumeration.Block Redstone_Dust -> as
    com.chunkmapper.enumeration.Block Diamond_Ore -> s
    com.chunkmapper.enumeration.Block Diamond_Block -> at
    com.chunkmapper.enumeration.Block Crafting_Table -> au
    com.chunkmapper.enumeration.Block Crops -> av
    com.chunkmapper.enumeration.Block Farmland -> aw
    com.chunkmapper.enumeration.Block Furnace -> ax
    com.chunkmapper.enumeration.Block Furnace_Lit -> ay
    com.chunkmapper.enumeration.Block Sign_Placed_Floor -> t
    com.chunkmapper.enumeration.Block Wooden_Door_Placed -> az
    com.chunkmapper.enumeration.Block Ladder -> u
    com.chunkmapper.enumeration.Block Minecart_Track -> aA
    com.chunkmapper.enumeration.Block Cobblestone_Steps -> v
    com.chunkmapper.enumeration.Block Sign_Placed_Wall -> aB
    com.chunkmapper.enumeration.Block Lever -> aC
    com.chunkmapper.enumeration.Block Stone_Pressure_Plate -> aD
    com.chunkmapper.enumeration.Block Metal_Door_Placed -> aE
    com.chunkmapper.enumeration.Block Wooden_Pressure_Plate -> w
    com.chunkmapper.enumeration.Block Redstone_Ore_Type_1 -> x
    com.chunkmapper.enumeration.Block Redstone_Ore_Type_2 -> aF
    com.chunkmapper.enumeration.Block Redstone_Torch_Unlit -> aG
    com.chunkmapper.enumeration.Block Redstone_Torch_Lit -> y
    com.chunkmapper.enumeration.Block Button -> aH
    com.chunkmapper.enumeration.Block Snow -> aI
    com.chunkmapper.enumeration.Block Ice -> aJ
    com.chunkmapper.enumeration.Block Snow_Block -> z
    com.chunkmapper.enumeration.Block Cactus -> aK
    com.chunkmapper.enumeration.Block Clay -> A
    com.chunkmapper.enumeration.Block Reeds__Sugar_Canes -> aL
    com.chunkmapper.enumeration.Block Juke_Box -> aM
    com.chunkmapper.enumeration.Block Fence -> B
    com.chunkmapper.enumeration.Block Unlit_JackOLantern -> aN
    com.chunkmapper.enumeration.Block Netherrack -> aO
    com.chunkmapper.enumeration.Block Soul_Sand -> aP
    com.chunkmapper.enumeration.Block Glow_Stone -> C
    com.chunkmapper.enumeration.Block Portal -> aQ
    com.chunkmapper.enumeration.Block Lit_JackOLantern -> aR
    com.chunkmapper.enumeration.Block Cake -> aS
    com.chunkmapper.enumeration.Block Long_Grass -> D
    com.chunkmapper.enumeration.Block Dandelion -> E
    com.chunkmapper.enumeration.Block Wood -> F
    com.chunkmapper.enumeration.Block Dead_Bush -> aT
    com.chunkmapper.enumeration.Block Vine -> aU
    com.chunkmapper.enumeration.Block End_Stone -> aV
    com.chunkmapper.enumeration.Block Wheat -> G
    com.chunkmapper.enumeration.Block Carrots -> aW
    com.chunkmapper.enumeration.Block Potatoes -> aX
    com.chunkmapper.enumeration.Block Rail -> H
    com.chunkmapper.enumeration.Block Powered_Rail -> I
    com.chunkmapper.enumeration.Block Stone_Brick -> J
    com.chunkmapper.enumeration.Block Wooden_Door -> K
    com.chunkmapper.enumeration.Block Window -> L
    com.chunkmapper.enumeration.Block Nether_Brick -> M
    com.chunkmapper.enumeration.Block Birch_Stairs -> N
    com.chunkmapper.enumeration.Block Nether_Fence -> O
    com.chunkmapper.enumeration.Block Block_Of_Quartz -> P
    com.chunkmapper.enumeration.Block Stone_Stairs -> Q
    byte val -> R
com.chunkmapper.enumeration.BlockColor -> com.chunkmapper.f.b:
    com.chunkmapper.enumeration.BlockColor White -> a
    com.chunkmapper.enumeration.BlockColor Orange -> i
    com.chunkmapper.enumeration.BlockColor Magenta -> j
    com.chunkmapper.enumeration.BlockColor Light_Blue -> k
    com.chunkmapper.enumeration.BlockColor Yellow -> l
    com.chunkmapper.enumeration.BlockColor Lime -> m
    com.chunkmapper.enumeration.BlockColor Pink -> n
    com.chunkmapper.enumeration.BlockColor Gray -> b
    com.chunkmapper.enumeration.BlockColor Light_Gray -> c
    com.chunkmapper.enumeration.BlockColor Cyan -> d
    com.chunkmapper.enumeration.BlockColor Purple -> o
    com.chunkmapper.enumeration.BlockColor Blue -> p
    com.chunkmapper.enumeration.BlockColor Brown -> e
    com.chunkmapper.enumeration.BlockColor Green -> q
    com.chunkmapper.enumeration.BlockColor Red -> f
    com.chunkmapper.enumeration.BlockColor Black -> g
    byte val -> h
    com.chunkmapper.enumeration.BlockColor[] $VALUES -> r
    byte cyclicColor(int) -> a
com.chunkmapper.enumeration.CircleRail -> com.chunkmapper.f.c:
    com.chunkmapper.enumeration.CircleRail One -> a
    com.chunkmapper.enumeration.CircleRail Two -> b
    com.chunkmapper.enumeration.CircleRail Three -> c
    com.chunkmapper.enumeration.CircleRail Four -> d
    byte val -> e
com.chunkmapper.enumeration.DataSource -> com.chunkmapper.f.d:
    com.chunkmapper.enumeration.DataSource Spruce -> f
    com.chunkmapper.enumeration.DataSource Jungle -> a
    com.chunkmapper.enumeration.DataSource Fern -> b
    com.chunkmapper.enumeration.DataSource Oak -> g
    com.chunkmapper.enumeration.DataSource Birch -> c
    com.chunkmapper.enumeration.DataSource Long_Grass -> d
    byte val -> e
com.chunkmapper.enumeration.FarmType -> com.chunkmapper.f.e:
    int Cows$1f8c7d88 -> a
    int Chicken$1f8c7d88 -> b
    int Sheep$1f8c7d88 -> c
    int Wheat$1f8c7d88 -> e
    int Potatoes$1f8c7d88 -> f
    int Carrots$1f8c7d88 -> g
    int Horses$1f8c7d88 -> d
    int[] $VALUES$6d1b9e5d -> h
    int[] values$7fb6ad82() -> a
    int[] getLivestockFarmTypes$7fb6ad82() -> b
com.chunkmapper.enumeration.Globcover -> com.chunkmapper.f.f:
    int IrrigatedCrops$3f3c2161 -> a
    int RainfedCrops$3f3c2161 -> b
    int CroplandWithVegetation$3f3c2161 -> c
    int VegetationWithCropland$3f3c2161 -> d
    int BroadleafEvergreen$3f3c2161 -> e
    int ClosedBroadleafDeciduous$3f3c2161 -> f
    int OpenBroadleafDeciduous$3f3c2161 -> g
    int ClosedNeedleleafEvergreen$3f3c2161 -> h
    int OpenNeedleleaf$3f3c2161 -> i
    int MixedBroadNeedleleaf$3f3c2161 -> j
    int ForestShrublandWithGrass$3f3c2161 -> k
    int GrassWithForestShrubland$3f3c2161 -> l
    int Shrubland$3f3c2161 -> m
    int Grassland$3f3c2161 -> n
    int SparseVegetation$3f3c2161 -> o
    int FreshFloodedForest$3f3c2161 -> p
    int SalineFloodedForest$3f3c2161 -> q
    int FloodedGrassland$3f3c2161 -> r
    int Urban$3f3c2161 -> s
    int Bare$3f3c2161 -> t
    int Water$3f3c2161 -> u
    int Snow$3f3c2161 -> v
    int NoData$3f3c2161 -> w
    int[] $VALUES$4797821c -> x
    int[] values$65dfade5() -> a
    int getGlobcover$9f3fd89(int) -> a
com.chunkmapper.enumeration.LadderWallsignFurnaceChest -> com.chunkmapper.f.g:
    com.chunkmapper.enumeration.LadderWallsignFurnaceChest Facing_North -> c
    com.chunkmapper.enumeration.LadderWallsignFurnaceChest Facing_South -> a
    com.chunkmapper.enumeration.LadderWallsignFurnaceChest Facing_West -> d
    com.chunkmapper.enumeration.LadderWallsignFurnaceChest Facing_East -> e
    byte val -> b
com.chunkmapper.enumeration.LenteTree -> com.chunkmapper.f.h:
    com.chunkmapper.enumeration.LenteTree Alaska_Cedar -> i
    com.chunkmapper.enumeration.LenteTree Alder -> j
    com.chunkmapper.enumeration.LenteTree American_Basswood -> k
    com.chunkmapper.enumeration.LenteTree American_Beech -> l
    com.chunkmapper.enumeration.LenteTree Aspen -> m
    com.chunkmapper.enumeration.LenteTree Astro_Fraxinifolium -> n
    com.chunkmapper.enumeration.LenteTree Astro_Juari -> o
    com.chunkmapper.enumeration.LenteTree Astro_Leicontei -> p
    com.chunkmapper.enumeration.LenteTree Atlantic_White_Cedar -> q
    com.chunkmapper.enumeration.LenteTree Awarra -> r
    com.chunkmapper.enumeration.LenteTree Babassu_Palm -> s
    com.chunkmapper.enumeration.LenteTree Baldcypress -> t
    com.chunkmapper.enumeration.LenteTree Balsam_Fir -> u
    com.chunkmapper.enumeration.LenteTree Blackthorn -> v
    com.chunkmapper.enumeration.LenteTree Brazil_Nut -> w
    com.chunkmapper.enumeration.LenteTree Californian_Red_Fir -> x
    com.chunkmapper.enumeration.LenteTree Cashapona -> y
    com.chunkmapper.enumeration.LenteTree Cinchona_Ledgeriana -> z
    com.chunkmapper.enumeration.LenteTree Common_Ash -> A
    com.chunkmapper.enumeration.LenteTree Common_Hawthorn -> B
    com.chunkmapper.enumeration.LenteTree Douglas_Fir -> C
    com.chunkmapper.enumeration.LenteTree European_Beech -> D
    com.chunkmapper.enumeration.LenteTree European_Black_Pine -> E
    com.chunkmapper.enumeration.LenteTree European_Holly -> F
    com.chunkmapper.enumeration.LenteTree European_Hornbeam -> G
    com.chunkmapper.enumeration.LenteTree European_Larch -> H
    com.chunkmapper.enumeration.LenteTree Fiberpalm -> I
    com.chunkmapper.enumeration.LenteTree Flowering_Dogwood -> J
    com.chunkmapper.enumeration.LenteTree Fraser_Fir -> K
    com.chunkmapper.enumeration.LenteTree Grand_Fir -> L
    com.chunkmapper.enumeration.LenteTree Green_Ash -> M
    com.chunkmapper.enumeration.LenteTree Hancornia_Speciosa -> N
    com.chunkmapper.enumeration.LenteTree Hazel -> O
    com.chunkmapper.enumeration.LenteTree Leopo_Piassaba -> P
    com.chunkmapper.enumeration.LenteTree Linden -> Q
    com.chunkmapper.enumeration.LenteTree Loblolly_Pine -> R
    com.chunkmapper.enumeration.LenteTree Lodgepole_Pine -> S
    com.chunkmapper.enumeration.LenteTree Maripa_palm -> T
    com.chunkmapper.enumeration.LenteTree Maritime_Pine -> U
    com.chunkmapper.enumeration.LenteTree Myrciaria -> V
    com.chunkmapper.enumeration.LenteTree Norway_Spruce -> W
    com.chunkmapper.enumeration.LenteTree Paper_Birch -> X
    com.chunkmapper.enumeration.LenteTree Parica -> Y
    com.chunkmapper.enumeration.LenteTree Peach_palm -> Z
    com.chunkmapper.enumeration.LenteTree Platypodium_Elegans -> aa
    com.chunkmapper.enumeration.LenteTree Quaking_Aspen -> ab
    com.chunkmapper.enumeration.LenteTree Red_Adler -> ac
    com.chunkmapper.enumeration.LenteTree Red_Maple -> ad
    com.chunkmapper.enumeration.LenteTree Rubbertree -> ae
    com.chunkmapper.enumeration.LenteTree Scots_Pine -> af
    com.chunkmapper.enumeration.LenteTree Sesille_Oak -> ag
    com.chunkmapper.enumeration.LenteTree Silver_Birch -> ah
    com.chunkmapper.enumeration.LenteTree Smooth_Leaved_Elm -> ai
    com.chunkmapper.enumeration.LenteTree Soncoya -> aj
    com.chunkmapper.enumeration.LenteTree Sugar_Maple -> ak
    com.chunkmapper.enumeration.LenteTree Sweetgum -> al
    com.chunkmapper.enumeration.LenteTree Theobroma_Cacao -> am
    com.chunkmapper.enumeration.LenteTree White_Oak -> an
    com.chunkmapper.enumeration.LenteTree White_Willow -> ao
    com.chunkmapper.enumeration.LenteTree Yagrumo_Macho -> ap
    java.util.Random RANDOM -> aq
    int rootDepth -> a
    com.chunkmapper.enumeration.LenteTree[] BoadleafEvergreen -> b
    com.chunkmapper.enumeration.LenteTree[] ClosedBroadleafDeciduous -> c
    com.chunkmapper.enumeration.LenteTree[] ClosedNeedleleafEvergreen -> d
    com.chunkmapper.enumeration.LenteTree[] CroplandWithVegetation -> e
    com.chunkmapper.enumeration.LenteTree[] ForestShrublandWithGrass -> ar
    com.chunkmapper.enumeration.LenteTree[] FreshFloodedForest -> f
    com.chunkmapper.enumeration.LenteTree[] MixedBroadNeedleleaf -> g
    com.chunkmapper.enumeration.LenteTree[] Shrubland -> h
    com.chunkmapper.enumeration.LenteTree[] $VALUES -> as
    com.chunkmapper.enumeration.LenteTree[] values() -> a
    com.chunkmapper.enumeration.LenteTree randomTree(com.chunkmapper.enumeration.LenteTree[]) -> a
com.chunkmapper.enumeration.Stairs -> com.chunkmapper.f.i:
    com.chunkmapper.enumeration.Stairs Ascending_East -> a
    com.chunkmapper.enumeration.Stairs Ascending_West -> b
    com.chunkmapper.enumeration.Stairs Ascending_South -> c
    com.chunkmapper.enumeration.Stairs Ascending_North -> d
    byte val -> e
com.chunkmapper.enumeration.StraightRail -> com.chunkmapper.f.j:
    com.chunkmapper.enumeration.StraightRail EastUp -> a
    com.chunkmapper.enumeration.StraightRail WestDown -> b
    com.chunkmapper.enumeration.StraightRail EastDown -> c
    com.chunkmapper.enumeration.StraightRail WestUp -> d
    com.chunkmapper.enumeration.StraightRail NorthUp -> e
    com.chunkmapper.enumeration.StraightRail SouthDown -> f
    com.chunkmapper.enumeration.StraightRail NorthDown -> g
    com.chunkmapper.enumeration.StraightRail SouthUp -> h
    com.chunkmapper.enumeration.StraightRail North -> i
    com.chunkmapper.enumeration.StraightRail South -> l
    com.chunkmapper.enumeration.StraightRail East -> j
    com.chunkmapper.enumeration.StraightRail West -> m
    byte val -> k
com.chunkmapper.gui.ApplicationTemplate -> com.chunkmapper.gui.a:
    void main(java.lang.String[]) -> main
    void insertBeforeCompass(gov.nasa.worldwind.WorldWindow,gov.nasa.worldwind.layers.Layer) -> a
    com.chunkmapper.gui.ApplicationTemplate$AppFrame start$5e2bca1e(java.lang.String) -> a
    void manageFeedback() -> a
com.chunkmapper.gui.ApplicationTemplate$1 -> com.chunkmapper.gui.b:
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.chunkmapper.gui.ApplicationTemplate$2 -> com.chunkmapper.gui.c:
    com.chunkmapper.gui.ApplicationTemplate$AppFrame val$frame -> a
    void run() -> run
com.chunkmapper.gui.ApplicationTemplate$AppFrame -> com.chunkmapper.gui.d:
    com.chunkmapper.admin.GlobalSettings globalSettings -> a
    java.awt.Dimension canvasSize -> b
    com.chunkmapper.gui.ApplicationTemplate$AppPanel wwjPanel -> c
    gov.nasa.worldwindx.examples.layermanager.LayerPanel layerPanel -> d
    gov.nasa.worldwind.util.StatisticsPanel statsPanel -> e
    boolean simpleGuiShown -> f
    void initialize(boolean,boolean,boolean) -> a
    gov.nasa.worldwind.WorldWindow getWwd() -> a
    boolean access$000(com.chunkmapper.gui.ApplicationTemplate$AppFrame) -> a
    boolean access$002(com.chunkmapper.gui.ApplicationTemplate$AppFrame,boolean) -> a
com.chunkmapper.gui.ApplicationTemplate$AppFrame$1 -> com.chunkmapper.gui.e:
    com.chunkmapper.gui.ApplicationTemplate$AppFrame this$0 -> a
    void exceptionThrown(java.lang.Throwable) -> exceptionThrown
com.chunkmapper.gui.ApplicationTemplate$AppPanel -> com.chunkmapper.gui.f:
    gov.nasa.worldwind.WorldWindow wwd -> a
    gov.nasa.worldwind.util.StatusBar statusBar -> b
    gov.nasa.worldwind.WorldWindow getWwd() -> a
com.chunkmapper.gui.GoToSwingWorker -> com.chunkmapper.gui.g:
    gov.nasa.worldwind.WorldWindow wwd -> a
    java.lang.String q -> b
    javax.swing.JFrame appFrame -> c
    void done() -> done
    java.lang.Object doInBackground() -> doInBackground
com.chunkmapper.gui.LicenseManager -> com.chunkmapper.gui.h:
    java.io.File LICENSE_FILE -> a
    java.lang.String getLicenseVersion() -> a
    void checkLicense(com.chunkmapper.gui.ApplicationTemplate$AppFrame) -> a
com.chunkmapper.gui.Main -> com.chunkmapper.gui.Main:
    void addMainLayer(gov.nasa.worldwind.WorldWindow,java.io.File,javax.swing.JFrame,com.chunkmapper.admin.GlobalSettings) -> a
    boolean hasFlawed(java.lang.String[]) -> a
    void main(java.lang.String[]) -> main
com.chunkmapper.gui.Main$AppFrame -> com.chunkmapper.gui.i:
    gov.nasa.worldwind.WorldWindow getWwd() -> a
com.chunkmapper.gui.Main$AppFrame$1 -> com.chunkmapper.gui.j:
    gov.nasa.worldwind.View val$v -> a
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
com.chunkmapper.gui.MappedSquareManagerImpl -> com.chunkmapper.gui.k:
    java.util.HashSet addedPoints -> a
    java.util.HashMap unfinishedPoints -> b
    gov.nasa.worldwind.layers.RenderableLayer layer -> c
    gov.nasa.worldwind.WorldWindow wwd -> d
    gov.nasa.worldwind.render.Box makeBox(com.chunkmapper.Point,gov.nasa.worldwind.render.Material) -> a
    void addFinishedPoint(com.chunkmapper.Point) -> a
    void remove() -> a
    void addUnfinishedPoint(com.chunkmapper.Point) -> b
com.chunkmapper.gui.PlayerIconManagerImpl -> com.chunkmapper.gui.l:
    gov.nasa.worldwind.render.UserFacingIcon icon -> a
    gov.nasa.worldwind.layers.IconLayer layer -> b
    gov.nasa.worldwind.WorldWindow wwd -> c
    double lat -> d
    double lon -> e
    void setLocation(double,double) -> a
    void remove() -> a
    gov.nasa.worldwind.geom.LatLon getLatLon() -> b
com.chunkmapper.gui.StartPointSelector -> com.chunkmapper.gui.m:
    gov.nasa.worldwind.WorldWindow wwd -> a
    com.chunkmapper.gui.layer.GeneratingLayerImpl generatingLayer -> b
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
com.chunkmapper.gui.dialog.AccountDialog -> com.chunkmapper.gui.a.a:
    javax.swing.JPanel contentPanel -> c
    javax.swing.JTextField textField -> d
    javax.swing.JPasswordField passwordField -> e
    javax.swing.JButton okButton -> f
    javax.swing.JButton cancelButton -> g
    boolean ok -> a
    javax.swing.JLabel lblToCreateA -> h
    javax.swing.JLabel lblChecking -> b
    javax.swing.JLabel lblNewLabel -> i
    javax.swing.JButton btnResetButton -> j
    javax.swing.JButton sslButton -> k
    void access$000(com.chunkmapper.gui.dialog.AccountDialog,java.lang.String,java.lang.String) -> a
    javax.swing.JTextField access$100(com.chunkmapper.gui.dialog.AccountDialog) -> a
    javax.swing.JButton access$200(com.chunkmapper.gui.dialog.AccountDialog) -> b
    javax.swing.JButton access$300(com.chunkmapper.gui.dialog.AccountDialog) -> c
    void access$400(com.chunkmapper.gui.dialog.AccountDialog) -> d
com.chunkmapper.gui.dialog.AccountDialog$1 -> com.chunkmapper.gui.a.b:
    com.chunkmapper.gui.dialog.AccountDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.AccountDialog$2 -> com.chunkmapper.gui.a.c:
    com.chunkmapper.gui.dialog.AccountDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.AccountDialog$3 -> com.chunkmapper.gui.a.d:
    com.chunkmapper.gui.dialog.AccountDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.AccountDialog$4 -> com.chunkmapper.gui.a.e:
    com.chunkmapper.gui.dialog.AccountDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.AccountDialog$4$1 -> com.chunkmapper.gui.a.f:
    com.chunkmapper.gui.dialog.AccountDialog$4 this$1 -> a
    void run() -> run
com.chunkmapper.gui.dialog.AccountDialog$5 -> com.chunkmapper.gui.a.g:
    com.chunkmapper.gui.dialog.AccountDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.AccountDialog$6 -> com.chunkmapper.gui.a.h:
    com.chunkmapper.gui.dialog.AccountDialog this$0 -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
com.chunkmapper.gui.dialog.AccountDialog$7 -> com.chunkmapper.gui.a.i:
    com.chunkmapper.gui.dialog.AccountDialog this$0 -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
com.chunkmapper.gui.dialog.AccountDialog$8 -> com.chunkmapper.gui.a.j:
    int[] $SwitchMap$com$chunkmapper$security$MySecurityManager$Status -> a
com.chunkmapper.gui.dialog.FeedbackDialog -> com.chunkmapper.gui.a.k:
    javax.swing.JPanel contentPanel -> a
    javax.swing.JCheckBox chckbxDontAskAgain -> b
    javax.swing.JCheckBox chckbxMapsDidntCompletely -> c
    javax.swing.JCheckBox chckbxChunkmapperMadeMy -> d
    javax.swing.JCheckBox chckbxNewCheckBox -> e
    javax.swing.JCheckBox chckbxItWasDifficult -> f
    javax.swing.JTextArea textArea -> g
    javax.swing.JCheckBox access$000(com.chunkmapper.gui.dialog.FeedbackDialog) -> a
    void access$100(com.chunkmapper.gui.dialog.FeedbackDialog) -> b
com.chunkmapper.gui.dialog.FeedbackDialog$1 -> com.chunkmapper.gui.a.l:
    com.chunkmapper.gui.dialog.FeedbackDialog this$0 -> a
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.chunkmapper.gui.dialog.FeedbackDialog$2 -> com.chunkmapper.gui.a.m:
    javax.swing.JButton val$okButton -> b
    com.chunkmapper.gui.dialog.FeedbackDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.FeedbackDialog$2$1 -> com.chunkmapper.gui.a.n:
    com.chunkmapper.gui.dialog.FeedbackDialog$2 this$1 -> a
    void run() -> run
com.chunkmapper.gui.dialog.FeedbackDialog$3 -> com.chunkmapper.gui.a.o:
    com.chunkmapper.gui.dialog.FeedbackDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.GoToDialog -> com.chunkmapper.gui.a.p:
    javax.swing.JPanel contentPanel -> a
    javax.swing.JTextField textField -> b
    boolean goTo -> c
    java.lang.String getPlace() -> a
    boolean access$002(com.chunkmapper.gui.dialog.GoToDialog,boolean) -> a
com.chunkmapper.gui.dialog.GoToDialog$1 -> com.chunkmapper.gui.a.q:
    com.chunkmapper.gui.dialog.GoToDialog this$0 -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
com.chunkmapper.gui.dialog.GoToDialog$2 -> com.chunkmapper.gui.a.r:
    com.chunkmapper.gui.dialog.GoToDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.GoToDialog$3 -> com.chunkmapper.gui.a.s:
    com.chunkmapper.gui.dialog.GoToDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.LicenseDialog -> com.chunkmapper.gui.a.t:
    javax.swing.JPanel contentPanel -> b
    boolean licenseAccepted -> a
    javax.swing.JCheckBox chckbxSubmitAnonymousUsage -> c
    java.lang.String getLicense() -> a
    javax.swing.JCheckBox access$000(com.chunkmapper.gui.dialog.LicenseDialog) -> a
com.chunkmapper.gui.dialog.LicenseDialog$1 -> com.chunkmapper.gui.a.u:
    com.chunkmapper.gui.dialog.LicenseDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.LicenseDialog$2 -> com.chunkmapper.gui.a.v:
    com.chunkmapper.gui.dialog.LicenseDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.NewMapDialog -> com.chunkmapper.gui.a.w:
    javax.swing.JPanel contentPanel -> a
    javax.swing.JTextField textField -> b
    javax.swing.JLabel lblNewLabel -> c
    javax.swing.JButton okButton -> d
    javax.swing.JButton cancelButton -> e
    java.lang.String gameName -> f
    java.lang.String getGameName() -> a
    void access$000(com.chunkmapper.gui.dialog.NewMapDialog,com.chunkmapper.gui.layer.GameAvailableInterface) -> a
    java.lang.String access$102(com.chunkmapper.gui.dialog.NewMapDialog,java.lang.String) -> a
    javax.swing.JTextField access$200(com.chunkmapper.gui.dialog.NewMapDialog) -> a
com.chunkmapper.gui.dialog.NewMapDialog$1 -> com.chunkmapper.gui.a.x:
    com.chunkmapper.gui.layer.GameAvailableInterface val$mainLayer -> a
    com.chunkmapper.gui.dialog.NewMapDialog this$0 -> b
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
com.chunkmapper.gui.dialog.NewMapDialog$2 -> com.chunkmapper.gui.a.y:
    com.chunkmapper.gui.dialog.NewMapDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.NewMapDialog$3 -> com.chunkmapper.gui.a.z:
    com.chunkmapper.gui.dialog.NewMapDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.NoNetworkDialog -> com.chunkmapper.gui.a.aa:
    javax.swing.JPanel contentPanel -> b
    boolean continueGeneration -> a
com.chunkmapper.gui.dialog.NoNetworkDialog$1 -> com.chunkmapper.gui.a.ab:
    com.chunkmapper.gui.dialog.NoNetworkDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.NoNetworkDialog$2 -> com.chunkmapper.gui.a.ac:
    com.chunkmapper.gui.dialog.NoNetworkDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.NoPurchaseDialog -> com.chunkmapper.gui.a.ad:
    javax.swing.JPanel contentPanel -> b
    javax.swing.JCheckBox tooSlow -> c
    javax.swing.JCheckBox cantpay -> d
    javax.swing.JCheckBox dontwanttopay -> e
    boolean submitted -> a
    javax.swing.JCheckBox chckbxTheMapsWere -> f
    javax.swing.JTextArea textArea -> g
    void access$000(com.chunkmapper.gui.dialog.NoPurchaseDialog) -> a
com.chunkmapper.gui.dialog.NoPurchaseDialog$1 -> com.chunkmapper.gui.a.ae:
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.chunkmapper.gui.dialog.NoPurchaseDialog$2 -> com.chunkmapper.gui.a.af:
    javax.swing.JButton val$okButton -> b
    com.chunkmapper.gui.dialog.NoPurchaseDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.NoPurchaseDialog$2$1 -> com.chunkmapper.gui.a.ag:
    com.chunkmapper.gui.dialog.NoPurchaseDialog$2 this$1 -> a
    void run() -> run
com.chunkmapper.gui.dialog.NoPurchaseDialog$3 -> com.chunkmapper.gui.a.ah:
    com.chunkmapper.gui.dialog.NoPurchaseDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.OreFrequencyDialog -> com.chunkmapper.gui.a.ai:
    javax.swing.JPanel contentPanel -> a
com.chunkmapper.gui.dialog.OreFrequencyDialog$1 -> com.chunkmapper.gui.a.aj:
    com.chunkmapper.gui.panel.OrePanel[] val$orePanels -> a
    com.chunkmapper.gui.dialog.OreFrequencyDialog this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.OreFrequencyDialog$2 -> com.chunkmapper.gui.a.ak:
    com.chunkmapper.gui.dialog.OreFrequencyDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.SettingsDialog -> com.chunkmapper.gui.a.al:
    javax.swing.JPanel contentPanel -> a
    javax.swing.JButton btnSendReport -> b
    javax.swing.JTextField textField -> c
    javax.swing.JButton access$000(com.chunkmapper.gui.dialog.SettingsDialog) -> a
    javax.swing.JTextField access$100(com.chunkmapper.gui.dialog.SettingsDialog) -> b
com.chunkmapper.gui.dialog.SettingsDialog$1 -> com.chunkmapper.gui.a.am:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.SettingsDialog$2 -> com.chunkmapper.gui.a.an:
    com.chunkmapper.gui.dialog.SettingsDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.SettingsDialog$2$1 -> com.chunkmapper.gui.a.ao:
    com.chunkmapper.gui.dialog.SettingsDialog$2 this$1 -> a
    void run() -> run
com.chunkmapper.gui.dialog.SettingsDialog$3 -> com.chunkmapper.gui.a.ap:
    javax.swing.JFrame val$appFrame -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.SettingsDialog$4 -> com.chunkmapper.gui.a.aq:
    com.chunkmapper.admin.GlobalSettings val$globalSettings -> a
    javax.swing.JCheckBox val$checkBox -> b
    javax.swing.JSpinner val$spinner -> c
    javax.swing.JCheckBox val$chckbxGaiaMode -> d
    com.chunkmapper.gui.dialog.SettingsDialog this$0 -> e
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.SettingsDialog$5 -> com.chunkmapper.gui.a.ar:
    com.chunkmapper.gui.dialog.SettingsDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.UpgradeAvailableDialog -> com.chunkmapper.gui.a.as:
    javax.swing.JPanel contentPanel -> a
    javax.swing.JCheckBox chckbxDontAskAgain -> b
    javax.swing.JCheckBox access$000(com.chunkmapper.gui.dialog.UpgradeAvailableDialog) -> a
    void access$100(com.chunkmapper.gui.dialog.UpgradeAvailableDialog) -> b
com.chunkmapper.gui.dialog.UpgradeAvailableDialog$1 -> com.chunkmapper.gui.a.at:
    com.chunkmapper.gui.dialog.UpgradeAvailableDialog this$0 -> a
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.chunkmapper.gui.dialog.UpgradeAvailableDialog$2 -> com.chunkmapper.gui.a.au:
    com.chunkmapper.gui.dialog.UpgradeAvailableDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.dialog.UpgradeAvailableDialog$3 -> com.chunkmapper.gui.a.av:
    com.chunkmapper.gui.dialog.UpgradeAvailableDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.layer.GameAvailableInterface -> com.chunkmapper.gui.b.a:
    boolean gameAvailable(java.lang.String) -> a
com.chunkmapper.gui.layer.GeneratingLayerImpl -> com.chunkmapper.gui.b.b:
    gov.nasa.worldwind.WorldWindow wwd -> a
    boolean update -> b
    gov.nasa.worldwind.render.ScreenAnnotation parentAnnotation -> c
    java.awt.Dimension size -> d
    java.awt.Color color -> e
    java.awt.Color highlightColor -> f
    double minOpacity -> g
    double maxOpacity -> h
    java.awt.Font font -> i
    java.io.File gameFolder -> j
    java.lang.String gameName -> k
    com.chunkmapper.gui.layer.MainLayer mainLayer -> l
    com.chunkmapper.ManagingThread managingThread -> m
    com.chunkmapper.gui.MappedSquareManagerImpl mappedSquareManager -> n
    com.chunkmapper.gui.PlayerIconManagerImpl playerIconManager -> o
    com.chunkmapper.admin.GlobalSettings globalSettings -> p
    boolean isCancelling -> q
    void startCenteredThread() -> b
    void startThread(double,double) -> a
    void cancel(boolean) -> a
    void selected(gov.nasa.worldwind.event.SelectEvent) -> selected
    void update() -> a
    java.lang.String divWidth(int) -> a
    void render(gov.nasa.worldwind.render.DrawContext) -> render
    java.lang.String toString() -> toString
    com.chunkmapper.gui.StartPointSelector access$000(com.chunkmapper.gui.layer.GeneratingLayerImpl) -> a
    com.chunkmapper.ManagingThread access$100(com.chunkmapper.gui.layer.GeneratingLayerImpl) -> b
    com.chunkmapper.ManagingThread access$102(com.chunkmapper.gui.layer.GeneratingLayerImpl,com.chunkmapper.ManagingThread) -> a
    com.chunkmapper.gui.MappedSquareManagerImpl access$200(com.chunkmapper.gui.layer.GeneratingLayerImpl) -> c
    com.chunkmapper.gui.PlayerIconManagerImpl access$300(com.chunkmapper.gui.layer.GeneratingLayerImpl) -> d
    com.chunkmapper.gui.layer.MainLayer access$400(com.chunkmapper.gui.layer.GeneratingLayerImpl) -> e
com.chunkmapper.gui.layer.GeneratingLayerImpl$1 -> com.chunkmapper.gui.b.c:
    boolean val$selfCalled -> a
    com.chunkmapper.gui.layer.GeneratingLayerImpl this$0 -> b
    void run() -> run
com.chunkmapper.gui.layer.MCNotAvailableLayer -> com.chunkmapper.gui.b.d:
    gov.nasa.worldwind.WorldWindow wwd -> a
    boolean update -> b
    gov.nasa.worldwind.render.ScreenAnnotation parentAnnotation -> c
    java.awt.Dimension size -> d
    java.awt.Color color -> e
    java.awt.Color highlightColor -> f
    double minOpacity -> g
    double maxOpacity -> h
    java.awt.Font font -> i
    javax.swing.JFrame appFrame -> j
    com.chunkmapper.admin.GlobalSettings globalSettings -> k
    void selected(gov.nasa.worldwind.event.SelectEvent) -> selected
    void update() -> a
    java.lang.String divWidth(int) -> a
    void render(gov.nasa.worldwind.render.DrawContext) -> render
    java.lang.String toString() -> toString
com.chunkmapper.gui.layer.MainLayer -> com.chunkmapper.gui.b.e:
    gov.nasa.worldwind.WorldWindow wwd -> a
    boolean update -> b
    gov.nasa.worldwind.render.ScreenAnnotation parentAnnotation -> c
    java.awt.Dimension size -> d
    java.awt.Color color -> e
    java.awt.Color highlightColor -> f
    double minOpacity -> g
    double maxOpacity -> h
    java.awt.Font font -> i
    javax.swing.JFrame appFrame -> j
    java.io.File savesDir -> k
    int numRows -> l
    java.util.HashSet takenGames -> m
    com.chunkmapper.admin.GlobalSettings globalSettings -> n
    void selected(gov.nasa.worldwind.event.SelectEvent) -> selected
    void displayGotoDialog() -> a
    void update() -> b
    java.lang.String divWidth(int) -> a
    void render(gov.nasa.worldwind.render.DrawContext) -> render
    java.lang.String toString() -> toString
    boolean gameAvailable(java.lang.String) -> a
    void access$000(com.chunkmapper.gui.layer.MainLayer) -> a
    javax.swing.JFrame access$100(com.chunkmapper.gui.layer.MainLayer) -> b
com.chunkmapper.gui.layer.MainLayer$1 -> com.chunkmapper.gui.b.f:
    com.chunkmapper.gui.layer.MainLayer this$0 -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
com.chunkmapper.gui.layer.MainLayer$2 -> com.chunkmapper.gui.b.g:
    gov.nasa.worldwind.View val$v -> a
    gov.nasa.worldwind.geom.Position val$p -> b
    com.chunkmapper.gui.layer.MainLayer this$0 -> c
    void run() -> run
com.chunkmapper.gui.layer.ViewControlsLayer -> com.chunkmapper.gui.b.h:
    gov.nasa.worldwind.render.ScreenAnnotation controlPan -> b
    gov.nasa.worldwind.render.ScreenAnnotation controlHeadingLeft -> c
    gov.nasa.worldwind.render.ScreenAnnotation controlHeadingRight -> d
    gov.nasa.worldwind.render.ScreenAnnotation controlZoomIn -> e
    gov.nasa.worldwind.render.ScreenAnnotation controlZoomOut -> f
    gov.nasa.worldwind.render.ScreenAnnotation controlPitchUp -> g
    gov.nasa.worldwind.render.ScreenAnnotation controlPitchDown -> h
    gov.nasa.worldwind.render.ScreenAnnotation currentControl -> i
    gov.nasa.worldwind.render.ScreenAnnotation trashControl -> j
    gov.nasa.worldwind.render.ScreenAnnotation menuControl -> k
    java.lang.String position -> l
    java.lang.String layout -> m
    gov.nasa.worldwind.geom.Vec4 locationCenter -> n
    gov.nasa.worldwind.geom.Vec4 locationOffset -> o
    double scale -> p
    int borderWidth -> q
    int buttonSize -> r
    int myButtonWidth -> s
    int myButtonHeight -> t
    int panSize -> u
    boolean initialized -> v
    java.awt.Rectangle referenceViewport -> w
    boolean showPanControls -> x
    boolean showLookControls -> y
    boolean showZoomControls -> z
    boolean showHeadingControls -> A
    boolean showPitchControls -> B
    boolean showFovControls -> C
    boolean showVeControls -> D
    boolean showMenu -> E
    com.chunkmapper.gui.layer.ViewControlsLayer singleton -> a
    double getScale() -> getScale
    void setOpacity(double) -> setOpacity
    double getOpacity() -> getOpacity
    java.lang.Object getHighlightedObject() -> a
    void highlight(java.lang.Object) -> a
    void doRender(gov.nasa.worldwind.render.DrawContext) -> doRender
    java.lang.Object getImageSource(java.lang.String) -> a
    void updatePositions(gov.nasa.worldwind.render.DrawContext) -> a
    java.lang.String toString() -> toString
    void hideAuxiliaryButton() -> b
com.chunkmapper.gui.layer.ViewControlsSelectListener -> com.chunkmapper.gui.b.i:
    gov.nasa.worldwind.WorldWindow wwd -> c
    com.chunkmapper.gui.layer.ViewControlsLayer viewControlsLayer -> d
    gov.nasa.worldwind.render.ScreenAnnotation pressedControl -> a
    java.lang.String pressedControlType -> b
    java.awt.Point lastPickPoint -> e
    javax.swing.Timer repeatTimer -> f
    double panStep -> g
    double zoomStep -> h
    double headingStep -> i
    double pitchStep -> j
    double fovStep -> k
    double veStep -> l
    javax.swing.JFrame appFrame -> m
    com.chunkmapper.admin.GlobalSettings globalSettings -> n
    void selected(gov.nasa.worldwind.event.SelectEvent) -> selected
    void updateView(gov.nasa.worldwind.render.ScreenAnnotation,java.lang.String) -> a
    double computeNewZoom(gov.nasa.worldwind.view.orbit.OrbitView,double) -> a
    void resetOrbitView(gov.nasa.worldwind.view.orbit.OrbitView) -> a
    gov.nasa.worldwind.geom.Vec4 computeSurfacePoint(gov.nasa.worldwind.view.orbit.OrbitView,gov.nasa.worldwind.geom.Angle,gov.nasa.worldwind.geom.Angle) -> a
com.chunkmapper.gui.layer.ViewControlsSelectListener$1 -> com.chunkmapper.gui.b.j:
    com.chunkmapper.gui.layer.ViewControlsSelectListener this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.panel.OrePanel -> com.chunkmapper.gui.c.a:
    javax.swing.JSpinner spinner -> a
    int getSpacing() -> a
com.chunkmapper.gui.simple.FindDialog -> com.chunkmapper.gui.d.a:
    javax.swing.JPanel contentPanel -> b
    javax.swing.JTextField textField -> c
    double[] latlon -> a
    javax.swing.JLabel label -> d
    javax.swing.JTextField access$000(com.chunkmapper.gui.simple.FindDialog) -> a
    void access$100(com.chunkmapper.gui.simple.FindDialog,java.lang.String) -> a
com.chunkmapper.gui.simple.FindDialog$1 -> com.chunkmapper.gui.d.b:
    javax.swing.JButton val$okButton -> a
    com.chunkmapper.gui.simple.FindDialog this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.simple.FindDialog$1$1 -> com.chunkmapper.gui.d.c:
    java.lang.String val$s -> a
    com.chunkmapper.gui.simple.FindDialog$1 this$1 -> b
    void done() -> done
    java.lang.Object doInBackground() -> doInBackground
com.chunkmapper.gui.simple.FindDialog$2 -> com.chunkmapper.gui.d.d:
    com.chunkmapper.gui.simple.FindDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.simple.GeneratingPanel -> com.chunkmapper.gui.d.e:
    javax.swing.JTextField latTextField -> a
    javax.swing.JTextField lonTextField -> b
    com.chunkmapper.gui.simple.MapPanel panel -> c
    double lat -> d
    double lon -> e
    javax.swing.JButton btnGenerateMap -> f
    javax.swing.JButton btnFindLatLon -> g
    javax.swing.JButton btnSettings -> h
    javax.swing.JButton btnDeleteMap -> i
    com.chunkmapper.admin.GlobalSettings globalSettings -> j
    boolean generating -> k
    java.io.File gameFolder -> l
    com.chunkmapper.gui.simple.SimplifiedGUI simplifiedGUI -> m
    com.chunkmapper.ManagingThread t -> n
    void setAllEnabled(boolean) -> a
    void updateGenerateButton() -> a
    javax.swing.JTextField access$000(com.chunkmapper.gui.simple.GeneratingPanel) -> a
    javax.swing.JTextField access$100(com.chunkmapper.gui.simple.GeneratingPanel) -> b
    boolean access$200(com.chunkmapper.gui.simple.GeneratingPanel) -> c
    void access$300(com.chunkmapper.gui.simple.GeneratingPanel) -> d
    void access$400(com.chunkmapper.gui.simple.GeneratingPanel) -> e
    com.chunkmapper.admin.GlobalSettings access$500(com.chunkmapper.gui.simple.GeneratingPanel) -> f
    java.io.File access$600(com.chunkmapper.gui.simple.GeneratingPanel) -> g
    void access$700(com.chunkmapper.gui.simple.GeneratingPanel) -> h
    double access$802(com.chunkmapper.gui.simple.GeneratingPanel,double) -> a
    double access$902(com.chunkmapper.gui.simple.GeneratingPanel,double) -> b
com.chunkmapper.gui.simple.GeneratingPanel$1 -> com.chunkmapper.gui.d.f:
    com.chunkmapper.gui.simple.SimplifiedGUI val$simplifiedGUI -> a
    com.chunkmapper.gui.simple.GeneratingPanel this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.simple.GeneratingPanel$2 -> com.chunkmapper.gui.d.g:
    com.chunkmapper.gui.simple.SimplifiedGUI val$simplifiedGUI -> a
    com.chunkmapper.gui.simple.GeneratingPanel this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.simple.GeneratingPanel$3 -> com.chunkmapper.gui.d.h:
    com.chunkmapper.gui.simple.SimplifiedGUI val$simplifiedGUI -> a
    com.chunkmapper.gui.simple.GeneratingPanel this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.simple.GeneratingPanel$4 -> com.chunkmapper.gui.d.i:
    com.chunkmapper.gui.simple.SimplifiedGUI val$simplifiedGUI -> a
    com.chunkmapper.gui.simple.GeneratingPanel this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.simple.GeneratingPanel$MyFilter -> com.chunkmapper.gui.d.j:
    javax.swing.JTextField parentField -> a
    com.chunkmapper.gui.simple.GeneratingPanel this$0 -> b
    void insertString(javax.swing.text.DocumentFilter$FilterBypass,int,java.lang.String,javax.swing.text.AttributeSet) -> insertString
    boolean test(java.lang.String) -> a
    void replace(javax.swing.text.DocumentFilter$FilterBypass,int,int,java.lang.String,javax.swing.text.AttributeSet) -> replace
    void remove(javax.swing.text.DocumentFilter$FilterBypass,int,int) -> remove
com.chunkmapper.gui.simple.MapPanel -> com.chunkmapper.gui.d.k:
    java.util.HashSet regionsMade -> a
    com.chunkmapper.Point playerPosition -> b
    java.awt.image.BufferedImage icon -> c
    java.awt.image.BufferedImage compass -> d
    int regionx1 -> e
    int regionz1 -> f
    int regionx2 -> g
    int regionz2 -> h
    void paintComponent(java.awt.Graphics) -> paintComponent
    void setLocation(double,double) -> a
    void addFinishedPoint(com.chunkmapper.Point) -> a
    void addUnfinishedPoint(com.chunkmapper.Point) -> b
com.chunkmapper.gui.simple.SimplifiedGUI -> com.chunkmapper.gui.d.l:
    javax.swing.JPanel contentPane -> a
    javax.swing.DefaultListModel defaultListModel -> b
    javax.swing.JButton btnNewChunkmap -> c
    javax.swing.JPanel currentPanel -> d
    javax.swing.JPanel panel -> e
    java.io.File saveFolder -> f
    javax.swing.JScrollPane scrollPane -> g
    javax.swing.JList list -> h
    javax.swing.DefaultListModel getListModel() -> d
    int numGames() -> a
    boolean gameAvailable(java.lang.String) -> a
    void setActive(boolean) -> a
    void deleteGame(java.io.File) -> a
    void open() -> b
    javax.swing.DefaultListModel access$000(com.chunkmapper.gui.simple.SimplifiedGUI) -> a
    javax.swing.JList access$100(com.chunkmapper.gui.simple.SimplifiedGUI) -> b
    javax.swing.JPanel access$200(com.chunkmapper.gui.simple.SimplifiedGUI) -> c
    javax.swing.JPanel access$300(com.chunkmapper.gui.simple.SimplifiedGUI) -> d
    java.io.File access$400() -> c
    javax.swing.JPanel access$202(com.chunkmapper.gui.simple.SimplifiedGUI,javax.swing.JPanel) -> a
com.chunkmapper.gui.simple.SimplifiedGUI$2 -> com.chunkmapper.gui.d.m:
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.chunkmapper.gui.simple.SimplifiedGUI$3 -> com.chunkmapper.gui.d.n:
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.chunkmapper.gui.simple.SimplifiedGUI$4 -> com.chunkmapper.gui.d.o:
    com.chunkmapper.gui.simple.SimplifiedGUI this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.simple.SimplifiedGUI$5 -> com.chunkmapper.gui.d.p:
    javax.swing.JButton val$btnAuthorizeAccount -> a
    com.chunkmapper.gui.simple.SimplifiedGUI this$0 -> b
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.chunkmapper.gui.simple.SimplifiedGUI$6 -> com.chunkmapper.gui.d.q:
    com.chunkmapper.gui.simple.SimplifiedGUI this$0 -> a
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
com.chunkmapper.gui.simple.SimplifiedGUI$7 -> com.chunkmapper.gui.d.r:
    com.chunkmapper.gui.simple.SimplifiedGUI val$frame -> a
    void run() -> run
com.chunkmapper.heights.HGTFile -> com.chunkmapper.g.a:
    java.io.File CACHE_DIR -> a
com.chunkmapper.heights.HGTFile2 -> com.chunkmapper.g.b:
    java.lang.Object masterLock -> a
    java.util.HashMap lockMap -> b
    java.io.File CACHE_DIR -> c
    java.awt.Point getLock(int,int) -> b
    byte[] getData(int,int) -> c
    short[][] getHeights(int,int) -> a
com.chunkmapper.interfaces.GeneratingLayer -> com.chunkmapper.h.a:
    void cancel(boolean) -> a
com.chunkmapper.interfaces.MappedSquareManager -> com.chunkmapper.h.b:
    void addFinishedPoint(com.chunkmapper.Point) -> a
    void addUnfinishedPoint(com.chunkmapper.Point) -> b
com.chunkmapper.interfaces.PlayerIconManager -> com.chunkmapper.h.c:
    void setLocation(double,double) -> a
com.chunkmapper.interfaces.PointManager -> com.chunkmapper.h.d:
    java.util.HashSet getNewPoints$25232ef6(java.io.File,com.chunkmapper.Point,com.chunkmapper.interfaces.PlayerIconManager) -> a
    void updateStore(com.chunkmapper.Point) -> a
    com.chunkmapper.Point getCurrentPlayerPosition() -> a
com.chunkmapper.manager.GlobcoverManager -> com.chunkmapper.i.a:
    com.chunkmapper.reader.HeightsReader heightsReader -> b
    com.chunkmapper.reader.XapiRailReader railReader -> c
    com.chunkmapper.reader.POIReader poiReader -> d
    com.chunkmapper.reader.HasHouseReader hasHouseReader -> e
    com.chunkmapper.reader.XapiBoundaryReader boundaryReader -> f
    com.chunkmapper.reader.RugbyReader rugbyReader -> g
    com.chunkmapper.reader.XapiHighwayReader highwayReader -> h
    com.chunkmapper.reader.FerryReader ferryReader -> i
    com.chunkmapper.reader.PathReader pathReader -> j
    com.chunkmapper.reader.HutReader hutReader -> k
    com.chunkmapper.reader.DensityReader densityReader -> l
    com.chunkmapper.reader.VolcanoReader volcanoReader -> m
    boolean allWater -> a
    com.chunkmapper.writer.ArtifactWriter artifactWriter -> n
    java.util.Random RANDOM -> o
    boolean gaiaMode -> p
    com.chunkmapper.column.AbstractColumn[][] columns -> q
    com.chunkmapper.chunk.Chunk getChunk(int,int,int,int) -> a
com.chunkmapper.manager.GlobcoverManager$1 -> com.chunkmapper.i.b:
    int[] $SwitchMap$com$chunkmapper$enumeration$Globcover -> a
com.chunkmapper.math.Matthewmatics -> com.chunkmapper.j.a:
    boolean $assertionsDisabled -> a
    int div(int,int) -> a
    int mod(int,int) -> b
com.chunkmapper.math.Piecewise -> com.chunkmapper.j.b:
    java.util.ArrayList xs -> a
    java.util.ArrayList ys -> b
    void addControlPoint(int,int) -> a
    double interpolateDouble(double) -> a
com.chunkmapper.math.Piecewise$PiecewiseException -> com.chunkmapper.j.c:
com.chunkmapper.math.StaticSobol -> com.chunkmapper.j.d:
    int[][] data -> a
    double[] ps -> b
    double[] qs -> c
    boolean hasObject(int,int,int) -> a
    double doubleXor(double,double) -> a
com.chunkmapper.multiplayer.LocServer -> com.chunkmapper.multiplayer.a:
    com.chunkmapper.Point rootPoint -> a
    java.io.File parentFolder -> b
    java.lang.String makeLink(java.lang.String,java.lang.String) -> a
    void handle(org.simpleframework.http.Request,org.simpleframework.http.Response) -> handle
    void startLocServer(com.chunkmapper.Point,java.io.File) -> a
com.chunkmapper.multiplayer.MPPointManager -> com.chunkmapper.multiplayer.b:
    java.util.ArrayList pointsFinished -> a
    java.util.HashSet pointsAssigned -> b
    java.io.File store -> c
    com.chunkmapper.multiplayer.TextDisplay textDisplay -> d
    java.util.HashMap readPositions(java.io.File) -> a
    com.chunkmapper.Point readPositionSingle(java.io.File) -> c
    java.util.HashSet getNewPoints$6aaa51d1(java.io.File) -> b
    void updateStore(com.chunkmapper.Point) -> a
com.chunkmapper.multiplayer.MPThread -> com.chunkmapper.multiplayer.MPThread:
    void main(java.lang.String[]) -> main
    double[] getLatLon() -> a
com.chunkmapper.multiplayer.MPThread$1 -> com.chunkmapper.multiplayer.c:
    int[] $SwitchMap$com$chunkmapper$security$MySecurityManager$Status -> a
com.chunkmapper.multiplayer.TextDisplay -> com.chunkmapper.multiplayer.d:
    java.io.File chunkmapperDir -> a
    java.util.HashSet points -> b
    char ZERO -> c
    char ONE -> d
    char PLAYER -> e
    java.util.concurrent.ConcurrentHashMap playerPositions -> f
    com.chunkmapper.Point rootPoint -> g
    void addFinishedPoint(com.chunkmapper.Point) -> a
    void updatePlayer(java.lang.String,int,int) -> a
    void addUnfinishedPoint(com.chunkmapper.Point) -> b
com.chunkmapper.nbt.ByteArrayTag -> com.chunkmapper.k.a:
    byte[] data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.ByteTag -> com.chunkmapper.k.b:
    byte data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.CompoundTag -> com.chunkmapper.k.c:
    java.util.Map tags -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    void put(java.lang.String,com.chunkmapper.nbt.Tag) -> a
    void putByte(java.lang.String,byte) -> a
    void putShort(java.lang.String,short) -> a
    void putInt(java.lang.String,int) -> a
    void putLong(java.lang.String,long) -> a
    void putFloat(java.lang.String,float) -> a
    void putDouble(java.lang.String,double) -> a
    void putString(java.lang.String,java.lang.String) -> a
    void putByteArray(java.lang.String,byte[]) -> a
    void putIntArray(java.lang.String,int[]) -> a
    void putCompound(java.lang.String,com.chunkmapper.nbt.CompoundTag) -> a
    int getInt(java.lang.String) -> a
    com.chunkmapper.nbt.CompoundTag getCompound(java.lang.String) -> b
    com.chunkmapper.nbt.ListTag getList(java.lang.String) -> c
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.DoubleTag -> com.chunkmapper.k.d:
    double data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.EndTag -> com.chunkmapper.k.e:
    void load(java.io.DataInput) -> a
    void write(java.io.DataOutput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.FloatTag -> com.chunkmapper.k.f:
    float data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.IntArrayTag -> com.chunkmapper.k.g:
    int[] data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.IntTag -> com.chunkmapper.k.h:
    int data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.ListTag -> com.chunkmapper.k.i:
    java.util.List list -> a
    byte type -> b
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    void add(com.chunkmapper.nbt.Tag) -> a
    com.chunkmapper.nbt.Tag get(int) -> a
    int size() -> b
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.LongTag -> com.chunkmapper.k.j:
    long data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.RegionFile -> com.chunkmapper.k.k:
    byte[] emptySector -> a
    java.io.File fileName -> b
    java.io.RandomAccessFile file -> c
    int[] offsets -> d
    int[] chunkTimestamps -> e
    java.util.ArrayList sectorFree -> f
    int sizeDelta -> g
    void debugln(java.lang.String) -> a
    void debug(java.lang.String,int,int,int,java.lang.String) -> a
    java.io.DataOutputStream getChunkDataOutputStream(int,int) -> a
    void write(int,int,byte[],int) -> a
    void write(int,byte[],int) -> a
    void setOffset(int,int,int) -> a
    void close() -> a
com.chunkmapper.nbt.RegionFile$ChunkBuffer -> com.chunkmapper.k.l:
    int x -> a
    int z -> b
    com.chunkmapper.nbt.RegionFile this$0 -> c
    void close() -> close
com.chunkmapper.nbt.ShortTag -> com.chunkmapper.k.m:
    short data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.StringTag -> com.chunkmapper.k.n:
    java.lang.String data -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.nbt.Tag -> com.chunkmapper.k.o:
    java.lang.String name -> a
    void write(java.io.DataOutput) -> a
    void load(java.io.DataInput) -> a
    byte getId() -> a
    boolean equals(java.lang.Object) -> equals
    com.chunkmapper.nbt.Tag setName(java.lang.String) -> d
    java.lang.String getName() -> c
    com.chunkmapper.nbt.Tag readNamedTag(java.io.DataInput) -> b
    void writeNamedTag(com.chunkmapper.nbt.Tag,java.io.DataOutput) -> a
    com.chunkmapper.nbt.Tag newTag(byte,java.lang.String) -> a
com.chunkmapper.parser.BoundaryParser -> com.chunkmapper.l.a:
    java.util.HashSet getBoundaries$2c5d02a4(com.chunkmapper.parser.OverpassObject) -> a
    java.util.HashSet getCoastlines$2c5d02a4(com.chunkmapper.parser.OverpassObject) -> b
    java.util.ArrayList getHighwaySections$18f721a1(com.chunkmapper.parser.OverpassObject) -> c
    java.lang.String getString(java.lang.String) -> d
    double[] getPoint(java.lang.String) -> a
    double[] getPointSafe(java.lang.String) -> b
    com.chunkmapper.parser.OverpassObject getObject(int,int) -> a
    java.util.ArrayList getRailSection$38975500(com.chunkmapper.reader.DensityReader,com.chunkmapper.parser.OverpassObject) -> a
    java.util.ArrayList getRiverSections$18f721a1(com.chunkmapper.parser.OverpassObject) -> d
com.chunkmapper.parser.OverpassObject -> com.chunkmapper.l.b:
    java.util.HashSet ways -> a
    java.util.HashSet nodes -> b
    java.util.HashSet relations -> c
    java.lang.String toString() -> toString
com.chunkmapper.parser.OverpassObject$Node -> com.chunkmapper.l.c:
    com.chunkmapper.Point point -> a
    java.util.HashMap map -> b
    long id -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.chunkmapper.parser.OverpassObject$Relation -> com.chunkmapper.l.d:
    java.util.HashSet ways -> a
    java.util.HashMap map -> b
    java.awt.Rectangle bbox -> c
    long id -> d
    void calculateBbox() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.parser.OverpassObject$Way -> com.chunkmapper.l.e:
    java.util.ArrayList points -> a
    java.util.HashMap map -> b
    java.awt.Rectangle bbox -> c
    long id -> d
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void calculateBbox() -> a
com.chunkmapper.parser.POIParser -> com.chunkmapper.l.f:
    java.util.concurrent.ConcurrentHashMap cache -> a
    void flushCache() -> a
    java.util.HashSet getPois(com.chunkmapper.parser.OverpassObject,int,int) -> a
    java.util.HashSet doGetPois$2c5d02a4(com.chunkmapper.parser.OverpassObject) -> a
    java.util.Collection getPois(int,int) -> a
com.chunkmapper.parser.Parser -> com.chunkmapper.l.g:
    java.lang.String getTag(java.lang.String) -> c
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String getValue(java.lang.String,java.lang.String) -> a
    java.util.HashMap getLocations(java.util.ArrayList) -> a
com.chunkmapper.protoc.HeightsContainer -> com.chunkmapper.m.a:
    com.google.protobuf.Descriptors$Descriptor internal_static_Heights_descriptor -> a
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internal_static_Heights_fieldAccessorTable -> b
    com.google.protobuf.Descriptors$FileDescriptor descriptor -> c
    com.google.protobuf.Descriptors$FileDescriptor getDescriptor() -> a
    com.google.protobuf.Descriptors$Descriptor access$000() -> b
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$100() -> c
    com.google.protobuf.Descriptors$FileDescriptor access$902(com.google.protobuf.Descriptors$FileDescriptor) -> a
    com.google.protobuf.Descriptors$Descriptor access$002(com.google.protobuf.Descriptors$Descriptor) -> a
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$102(com.google.protobuf.GeneratedMessage$FieldAccessorTable) -> a
com.chunkmapper.protoc.HeightsContainer$1 -> com.chunkmapper.m.b:
    com.google.protobuf.ExtensionRegistry assignDescriptors(com.google.protobuf.Descriptors$FileDescriptor) -> assignDescriptors
com.chunkmapper.protoc.HeightsContainer$Heights -> com.chunkmapper.m.c:
    com.chunkmapper.protoc.HeightsContainer$Heights defaultInstance -> b
    com.google.protobuf.UnknownFieldSet unknownFields -> c
    com.google.protobuf.Parser PARSER -> a
    java.util.List lats_ -> d
    int latsMemoizedSerializedSize -> e
    java.util.List lons_ -> f
    int lonsMemoizedSerializedSize -> g
    byte memoizedIsInitialized -> h
    int memoizedSerializedSize -> i
    com.chunkmapper.protoc.HeightsContainer$Heights getDefaultInstance() -> a
    com.google.protobuf.UnknownFieldSet getUnknownFields() -> getUnknownFields
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.google.protobuf.Parser getParserForType() -> getParserForType
    java.util.List getLatsList() -> b
    java.util.List getLonsList() -> c
    void initFields() -> e
    boolean isInitialized() -> isInitialized
    void writeTo(com.google.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    java.lang.Object writeReplace() -> writeReplace
    com.chunkmapper.protoc.HeightsContainer$Heights parseFrom(java.io.InputStream) -> a
    com.chunkmapper.protoc.HeightsContainer$Heights$Builder toBuilder() -> f
    com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent) -> newBuilderForType
    com.google.protobuf.Message$Builder toBuilder() -> toBuilder
    com.google.protobuf.Message$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    com.google.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    boolean access$500() -> d
    java.util.List access$702(com.chunkmapper.protoc.HeightsContainer$Heights,java.util.List) -> a
    java.util.List access$802(com.chunkmapper.protoc.HeightsContainer$Heights,java.util.List) -> b
    java.util.List access$700(com.chunkmapper.protoc.HeightsContainer$Heights) -> a
    java.util.List access$800(com.chunkmapper.protoc.HeightsContainer$Heights) -> b
com.chunkmapper.protoc.HeightsContainer$Heights$1 -> com.chunkmapper.m.d:
    java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> parsePartialFrom
com.chunkmapper.protoc.HeightsContainer$Heights$Builder -> com.chunkmapper.m.e:
    int bitField0_ -> a
    java.util.List lats_ -> b
    java.util.List lons_ -> c
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.chunkmapper.protoc.HeightsContainer$Heights$Builder clear() -> b
    com.chunkmapper.protoc.HeightsContainer$Heights$Builder clone() -> c
    com.google.protobuf.Descriptors$Descriptor getDescriptorForType() -> getDescriptorForType
    com.chunkmapper.protoc.HeightsContainer$Heights build() -> d
    com.chunkmapper.protoc.HeightsContainer$Heights buildPartial() -> e
    com.chunkmapper.protoc.HeightsContainer$Heights$Builder mergeFrom(com.google.protobuf.Message) -> a
    com.chunkmapper.protoc.HeightsContainer$Heights$Builder mergeFrom(com.chunkmapper.protoc.HeightsContainer$Heights) -> a
    boolean isInitialized() -> isInitialized
    com.chunkmapper.protoc.HeightsContainer$Heights$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
    com.google.protobuf.GeneratedMessage$Builder clear() -> clear
    com.google.protobuf.GeneratedMessage$Builder clone() -> clone
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder clear() -> clear
    com.google.protobuf.AbstractMessage$Builder clone() -> clone
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.Message$Builder clone() -> clone
    com.google.protobuf.Message buildPartial() -> buildPartial
    com.google.protobuf.Message build() -> build
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.Message$Builder clear() -> clear
    com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.MessageLite$Builder clone() -> clone
    com.google.protobuf.MessageLite buildPartial() -> buildPartial
    com.google.protobuf.MessageLite build() -> build
    com.google.protobuf.MessageLite$Builder clear() -> clear
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessageLite$Builder clone() -> clone
    java.lang.Object clone() -> clone
    com.chunkmapper.protoc.HeightsContainer$Heights$Builder access$300() -> a
com.chunkmapper.protoc.HeightsContainer$HeightsOrBuilder -> com.chunkmapper.m.f:
com.chunkmapper.protoc.OSMContainer -> com.chunkmapper.m.g:
    com.google.protobuf.Descriptors$Descriptor internal_static_Rectangle_descriptor -> a
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internal_static_Rectangle_fieldAccessorTable -> b
    com.google.protobuf.Descriptors$Descriptor internal_static_Node_descriptor -> c
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internal_static_Node_fieldAccessorTable -> d
    com.google.protobuf.Descriptors$Descriptor internal_static_Way_descriptor -> e
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internal_static_Way_fieldAccessorTable -> f
    com.google.protobuf.Descriptors$Descriptor internal_static_Relation_descriptor -> g
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internal_static_Relation_fieldAccessorTable -> h
    com.google.protobuf.Descriptors$FileDescriptor descriptor -> i
    com.google.protobuf.Descriptors$FileDescriptor getDescriptor() -> a
    com.google.protobuf.Descriptors$Descriptor access$000() -> b
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$100() -> c
    com.google.protobuf.Descriptors$Descriptor access$1200() -> d
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$1300() -> e
    com.google.protobuf.Descriptors$Descriptor access$2500() -> f
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$2600() -> g
    com.google.protobuf.Descriptors$Descriptor access$3900() -> h
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$4000() -> i
    com.google.protobuf.Descriptors$FileDescriptor access$5202(com.google.protobuf.Descriptors$FileDescriptor) -> a
    com.google.protobuf.Descriptors$Descriptor access$002(com.google.protobuf.Descriptors$Descriptor) -> a
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$102(com.google.protobuf.GeneratedMessage$FieldAccessorTable) -> a
    com.google.protobuf.Descriptors$Descriptor access$1202(com.google.protobuf.Descriptors$Descriptor) -> b
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$1302(com.google.protobuf.GeneratedMessage$FieldAccessorTable) -> b
    com.google.protobuf.Descriptors$Descriptor access$2502(com.google.protobuf.Descriptors$Descriptor) -> c
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$2602(com.google.protobuf.GeneratedMessage$FieldAccessorTable) -> c
    com.google.protobuf.Descriptors$Descriptor access$3902(com.google.protobuf.Descriptors$Descriptor) -> d
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$4002(com.google.protobuf.GeneratedMessage$FieldAccessorTable) -> d
com.chunkmapper.protoc.OSMContainer$1 -> com.chunkmapper.m.h:
    com.google.protobuf.ExtensionRegistry assignDescriptors(com.google.protobuf.Descriptors$FileDescriptor) -> assignDescriptors
com.chunkmapper.protoc.OSMContainer$Node -> com.chunkmapper.m.i:
    com.chunkmapper.protoc.OSMContainer$Node defaultInstance -> b
    com.google.protobuf.UnknownFieldSet unknownFields -> c
    com.google.protobuf.Parser PARSER -> a
    int bitField0_ -> d
    int x_ -> e
    int z_ -> f
    com.google.protobuf.LazyStringList keys_ -> g
    com.google.protobuf.LazyStringList vals_ -> h
    long id_ -> i
    byte memoizedIsInitialized -> j
    int memoizedSerializedSize -> k
    com.chunkmapper.protoc.OSMContainer$Node getDefaultInstance() -> a
    com.google.protobuf.UnknownFieldSet getUnknownFields() -> getUnknownFields
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.google.protobuf.Parser getParserForType() -> getParserForType
    boolean hasX() -> b
    int getX() -> c
    boolean hasZ() -> d
    int getZ() -> e
    java.util.List getKeysList() -> f
    java.util.List getValsList() -> g
    boolean hasId() -> h
    long getId() -> i
    void initFields() -> k
    boolean isInitialized() -> isInitialized
    void writeTo(com.google.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    java.lang.Object writeReplace() -> writeReplace
    com.chunkmapper.protoc.OSMContainer$Node parseFrom(byte[]) -> a
    com.chunkmapper.protoc.OSMContainer$Node$Builder toBuilder() -> l
    com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent) -> newBuilderForType
    com.google.protobuf.Message$Builder toBuilder() -> toBuilder
    com.google.protobuf.Message$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    com.google.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    boolean access$1700() -> j
    int access$1902(com.chunkmapper.protoc.OSMContainer$Node,int) -> a
    int access$2002(com.chunkmapper.protoc.OSMContainer$Node,int) -> b
    com.google.protobuf.LazyStringList access$2102(com.chunkmapper.protoc.OSMContainer$Node,com.google.protobuf.LazyStringList) -> a
    com.google.protobuf.LazyStringList access$2202(com.chunkmapper.protoc.OSMContainer$Node,com.google.protobuf.LazyStringList) -> b
    long access$2302(com.chunkmapper.protoc.OSMContainer$Node,long) -> a
    int access$2402(com.chunkmapper.protoc.OSMContainer$Node,int) -> c
    com.google.protobuf.LazyStringList access$2100(com.chunkmapper.protoc.OSMContainer$Node) -> a
    com.google.protobuf.LazyStringList access$2200(com.chunkmapper.protoc.OSMContainer$Node) -> b
com.chunkmapper.protoc.OSMContainer$Node$1 -> com.chunkmapper.m.j:
    java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> parsePartialFrom
com.chunkmapper.protoc.OSMContainer$Node$Builder -> com.chunkmapper.m.k:
    int bitField0_ -> a
    int x_ -> b
    int z_ -> c
    com.google.protobuf.LazyStringList keys_ -> d
    com.google.protobuf.LazyStringList vals_ -> e
    long id_ -> f
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.chunkmapper.protoc.OSMContainer$Node$Builder clear() -> b
    com.chunkmapper.protoc.OSMContainer$Node$Builder clone() -> c
    com.google.protobuf.Descriptors$Descriptor getDescriptorForType() -> getDescriptorForType
    com.chunkmapper.protoc.OSMContainer$Node build() -> d
    com.chunkmapper.protoc.OSMContainer$Node buildPartial() -> e
    com.chunkmapper.protoc.OSMContainer$Node$Builder mergeFrom(com.google.protobuf.Message) -> a
    com.chunkmapper.protoc.OSMContainer$Node$Builder mergeFrom(com.chunkmapper.protoc.OSMContainer$Node) -> a
    boolean isInitialized() -> isInitialized
    com.chunkmapper.protoc.OSMContainer$Node$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
    com.google.protobuf.GeneratedMessage$Builder clear() -> clear
    com.google.protobuf.GeneratedMessage$Builder clone() -> clone
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder clear() -> clear
    com.google.protobuf.AbstractMessage$Builder clone() -> clone
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.Message$Builder clone() -> clone
    com.google.protobuf.Message buildPartial() -> buildPartial
    com.google.protobuf.Message build() -> build
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.Message$Builder clear() -> clear
    com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.MessageLite$Builder clone() -> clone
    com.google.protobuf.MessageLite buildPartial() -> buildPartial
    com.google.protobuf.MessageLite build() -> build
    com.google.protobuf.MessageLite$Builder clear() -> clear
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessageLite$Builder clone() -> clone
    java.lang.Object clone() -> clone
    com.chunkmapper.protoc.OSMContainer$Node$Builder access$1500() -> a
com.chunkmapper.protoc.OSMContainer$Rectangle -> com.chunkmapper.m.l:
    com.chunkmapper.protoc.OSMContainer$Rectangle defaultInstance -> b
    com.google.protobuf.UnknownFieldSet unknownFields -> c
    com.google.protobuf.Parser PARSER -> a
    int bitField0_ -> d
    int x_ -> e
    int z_ -> f
    int width_ -> g
    int height_ -> h
    byte memoizedIsInitialized -> i
    int memoizedSerializedSize -> j
    com.chunkmapper.protoc.OSMContainer$Rectangle getDefaultInstance() -> a
    com.google.protobuf.UnknownFieldSet getUnknownFields() -> getUnknownFields
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.google.protobuf.Parser getParserForType() -> getParserForType
    boolean hasX() -> b
    int getX() -> c
    boolean hasZ() -> d
    int getZ() -> e
    boolean hasWidth() -> f
    int getWidth() -> g
    boolean hasHeight() -> h
    int getHeight() -> i
    void initFields() -> l
    boolean isInitialized() -> isInitialized
    void writeTo(com.google.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    java.lang.Object writeReplace() -> writeReplace
    com.chunkmapper.protoc.OSMContainer$Rectangle$Builder newBuilder(com.chunkmapper.protoc.OSMContainer$Rectangle) -> a
    com.chunkmapper.protoc.OSMContainer$Rectangle$Builder toBuilder() -> j
    com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent) -> newBuilderForType
    com.google.protobuf.Message$Builder toBuilder() -> toBuilder
    com.google.protobuf.Message$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    com.google.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    boolean access$500() -> k
    int access$702(com.chunkmapper.protoc.OSMContainer$Rectangle,int) -> a
    int access$802(com.chunkmapper.protoc.OSMContainer$Rectangle,int) -> b
    int access$902(com.chunkmapper.protoc.OSMContainer$Rectangle,int) -> c
    int access$1002(com.chunkmapper.protoc.OSMContainer$Rectangle,int) -> d
    int access$1102(com.chunkmapper.protoc.OSMContainer$Rectangle,int) -> e
com.chunkmapper.protoc.OSMContainer$Rectangle$1 -> com.chunkmapper.m.m:
    java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> parsePartialFrom
com.chunkmapper.protoc.OSMContainer$Rectangle$Builder -> com.chunkmapper.m.n:
    int bitField0_ -> a
    int x_ -> b
    int z_ -> c
    int width_ -> d
    int height_ -> e
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.chunkmapper.protoc.OSMContainer$Rectangle$Builder clear() -> c
    com.chunkmapper.protoc.OSMContainer$Rectangle$Builder clone() -> d
    com.google.protobuf.Descriptors$Descriptor getDescriptorForType() -> getDescriptorForType
    com.chunkmapper.protoc.OSMContainer$Rectangle build() -> e
    com.chunkmapper.protoc.OSMContainer$Rectangle buildPartial() -> a
    com.chunkmapper.protoc.OSMContainer$Rectangle$Builder mergeFrom(com.google.protobuf.Message) -> a
    com.chunkmapper.protoc.OSMContainer$Rectangle$Builder mergeFrom(com.chunkmapper.protoc.OSMContainer$Rectangle) -> a
    boolean isInitialized() -> isInitialized
    com.chunkmapper.protoc.OSMContainer$Rectangle$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
    com.google.protobuf.GeneratedMessage$Builder clear() -> clear
    com.google.protobuf.GeneratedMessage$Builder clone() -> clone
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder clear() -> clear
    com.google.protobuf.AbstractMessage$Builder clone() -> clone
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.Message$Builder clone() -> clone
    com.google.protobuf.Message buildPartial() -> buildPartial
    com.google.protobuf.Message build() -> build
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.Message$Builder clear() -> clear
    com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.MessageLite$Builder clone() -> clone
    com.google.protobuf.MessageLite buildPartial() -> buildPartial
    com.google.protobuf.MessageLite build() -> build
    com.google.protobuf.MessageLite$Builder clear() -> clear
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessageLite$Builder clone() -> clone
    java.lang.Object clone() -> clone
    com.chunkmapper.protoc.OSMContainer$Rectangle$Builder access$300() -> b
com.chunkmapper.protoc.OSMContainer$Relation -> com.chunkmapper.m.o:
    com.chunkmapper.protoc.OSMContainer$Relation defaultInstance -> b
    com.google.protobuf.UnknownFieldSet unknownFields -> c
    com.google.protobuf.Parser PARSER -> a
    int bitField0_ -> d
    java.util.List ways_ -> e
    com.google.protobuf.LazyStringList roles_ -> f
    com.google.protobuf.LazyStringList keys_ -> g
    com.google.protobuf.LazyStringList vals_ -> h
    long id_ -> i
    byte memoizedIsInitialized -> j
    int memoizedSerializedSize -> k
    com.chunkmapper.protoc.OSMContainer$Relation getDefaultInstance() -> a
    com.google.protobuf.UnknownFieldSet getUnknownFields() -> getUnknownFields
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.google.protobuf.Parser getParserForType() -> getParserForType
    java.util.List getWaysList() -> b
    java.util.List getKeysList() -> c
    java.util.List getValsList() -> d
    boolean hasId() -> e
    long getId() -> f
    void initFields() -> h
    boolean isInitialized() -> isInitialized
    void writeTo(com.google.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    java.lang.Object writeReplace() -> writeReplace
    com.chunkmapper.protoc.OSMContainer$Relation parseFrom(byte[]) -> a
    com.chunkmapper.protoc.OSMContainer$Relation$Builder toBuilder() -> i
    com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent) -> newBuilderForType
    com.google.protobuf.Message$Builder toBuilder() -> toBuilder
    com.google.protobuf.Message$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    com.google.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    boolean access$4400() -> g
    java.util.List access$4602(com.chunkmapper.protoc.OSMContainer$Relation,java.util.List) -> a
    com.google.protobuf.LazyStringList access$4702(com.chunkmapper.protoc.OSMContainer$Relation,com.google.protobuf.LazyStringList) -> a
    com.google.protobuf.LazyStringList access$4802(com.chunkmapper.protoc.OSMContainer$Relation,com.google.protobuf.LazyStringList) -> b
    com.google.protobuf.LazyStringList access$4902(com.chunkmapper.protoc.OSMContainer$Relation,com.google.protobuf.LazyStringList) -> c
    long access$5002(com.chunkmapper.protoc.OSMContainer$Relation,long) -> a
    int access$5102(com.chunkmapper.protoc.OSMContainer$Relation,int) -> a
    java.util.List access$4600(com.chunkmapper.protoc.OSMContainer$Relation) -> a
    com.google.protobuf.LazyStringList access$4700(com.chunkmapper.protoc.OSMContainer$Relation) -> b
    com.google.protobuf.LazyStringList access$4800(com.chunkmapper.protoc.OSMContainer$Relation) -> c
    com.google.protobuf.LazyStringList access$4900(com.chunkmapper.protoc.OSMContainer$Relation) -> d
com.chunkmapper.protoc.OSMContainer$Relation$1 -> com.chunkmapper.m.p:
    java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> parsePartialFrom
com.chunkmapper.protoc.OSMContainer$Relation$Builder -> com.chunkmapper.m.q:
    int bitField0_ -> a
    java.util.List ways_ -> b
    com.google.protobuf.LazyStringList roles_ -> c
    com.google.protobuf.LazyStringList keys_ -> d
    com.google.protobuf.LazyStringList vals_ -> e
    long id_ -> f
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.chunkmapper.protoc.OSMContainer$Relation$Builder clear() -> b
    com.chunkmapper.protoc.OSMContainer$Relation$Builder clone() -> c
    com.google.protobuf.Descriptors$Descriptor getDescriptorForType() -> getDescriptorForType
    com.chunkmapper.protoc.OSMContainer$Relation build() -> d
    com.chunkmapper.protoc.OSMContainer$Relation buildPartial() -> e
    com.chunkmapper.protoc.OSMContainer$Relation$Builder mergeFrom(com.google.protobuf.Message) -> a
    com.chunkmapper.protoc.OSMContainer$Relation$Builder mergeFrom(com.chunkmapper.protoc.OSMContainer$Relation) -> a
    boolean isInitialized() -> isInitialized
    com.chunkmapper.protoc.OSMContainer$Relation$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
    com.google.protobuf.GeneratedMessage$Builder clear() -> clear
    com.google.protobuf.GeneratedMessage$Builder clone() -> clone
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder clear() -> clear
    com.google.protobuf.AbstractMessage$Builder clone() -> clone
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.Message$Builder clone() -> clone
    com.google.protobuf.Message buildPartial() -> buildPartial
    com.google.protobuf.Message build() -> build
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.Message$Builder clear() -> clear
    com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.MessageLite$Builder clone() -> clone
    com.google.protobuf.MessageLite buildPartial() -> buildPartial
    com.google.protobuf.MessageLite build() -> build
    com.google.protobuf.MessageLite$Builder clear() -> clear
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessageLite$Builder clone() -> clone
    java.lang.Object clone() -> clone
    com.chunkmapper.protoc.OSMContainer$Relation$Builder access$4200() -> a
com.chunkmapper.protoc.OSMContainer$Way -> com.chunkmapper.m.r:
    com.chunkmapper.protoc.OSMContainer$Way defaultInstance -> b
    com.google.protobuf.UnknownFieldSet unknownFields -> c
    com.google.protobuf.Parser PARSER -> a
    int bitField0_ -> d
    java.util.List xs_ -> e
    int xsMemoizedSerializedSize -> f
    java.util.List zs_ -> g
    int zsMemoizedSerializedSize -> h
    com.google.protobuf.LazyStringList keys_ -> i
    com.google.protobuf.LazyStringList vals_ -> j
    long id_ -> k
    com.chunkmapper.protoc.OSMContainer$Rectangle bbox_ -> l
    byte memoizedIsInitialized -> m
    int memoizedSerializedSize -> n
    com.chunkmapper.protoc.OSMContainer$Way getDefaultInstance() -> a
    com.google.protobuf.UnknownFieldSet getUnknownFields() -> getUnknownFields
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.google.protobuf.Parser getParserForType() -> getParserForType
    java.util.List getXsList() -> b
    java.util.List getZsList() -> c
    java.util.List getKeysList() -> d
    java.util.List getValsList() -> e
    boolean hasId() -> f
    long getId() -> g
    boolean hasBbox() -> h
    com.chunkmapper.protoc.OSMContainer$Rectangle getBbox() -> i
    void initFields() -> k
    boolean isInitialized() -> isInitialized
    void writeTo(com.google.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    java.lang.Object writeReplace() -> writeReplace
    com.chunkmapper.protoc.OSMContainer$Way parseFrom(byte[]) -> a
    com.chunkmapper.protoc.OSMContainer$Way$Builder toBuilder() -> l
    com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent) -> newBuilderForType
    com.google.protobuf.Message$Builder toBuilder() -> toBuilder
    com.google.protobuf.Message$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    com.google.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    boolean access$3000() -> j
    java.util.List access$3202(com.chunkmapper.protoc.OSMContainer$Way,java.util.List) -> a
    java.util.List access$3302(com.chunkmapper.protoc.OSMContainer$Way,java.util.List) -> b
    com.google.protobuf.LazyStringList access$3402(com.chunkmapper.protoc.OSMContainer$Way,com.google.protobuf.LazyStringList) -> a
    com.google.protobuf.LazyStringList access$3502(com.chunkmapper.protoc.OSMContainer$Way,com.google.protobuf.LazyStringList) -> b
    long access$3602(com.chunkmapper.protoc.OSMContainer$Way,long) -> a
    com.chunkmapper.protoc.OSMContainer$Rectangle access$3702(com.chunkmapper.protoc.OSMContainer$Way,com.chunkmapper.protoc.OSMContainer$Rectangle) -> a
    int access$3802(com.chunkmapper.protoc.OSMContainer$Way,int) -> a
    java.util.List access$3200(com.chunkmapper.protoc.OSMContainer$Way) -> a
    java.util.List access$3300(com.chunkmapper.protoc.OSMContainer$Way) -> b
    com.google.protobuf.LazyStringList access$3400(com.chunkmapper.protoc.OSMContainer$Way) -> c
    com.google.protobuf.LazyStringList access$3500(com.chunkmapper.protoc.OSMContainer$Way) -> d
com.chunkmapper.protoc.OSMContainer$Way$1 -> com.chunkmapper.m.s:
    java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> parsePartialFrom
com.chunkmapper.protoc.OSMContainer$Way$Builder -> com.chunkmapper.m.t:
    int bitField0_ -> a
    java.util.List xs_ -> b
    java.util.List zs_ -> c
    com.google.protobuf.LazyStringList keys_ -> d
    com.google.protobuf.LazyStringList vals_ -> e
    long id_ -> f
    com.chunkmapper.protoc.OSMContainer$Rectangle bbox_ -> g
    com.google.protobuf.SingleFieldBuilder bboxBuilder_ -> h
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    void maybeForceBuilderInitialization() -> b
    com.chunkmapper.protoc.OSMContainer$Way$Builder clear() -> c
    com.chunkmapper.protoc.OSMContainer$Way$Builder clone() -> d
    com.google.protobuf.Descriptors$Descriptor getDescriptorForType() -> getDescriptorForType
    com.chunkmapper.protoc.OSMContainer$Way build() -> e
    com.chunkmapper.protoc.OSMContainer$Way buildPartial() -> f
    com.chunkmapper.protoc.OSMContainer$Way$Builder mergeFrom(com.google.protobuf.Message) -> a
    com.chunkmapper.protoc.OSMContainer$Way$Builder mergeFrom(com.chunkmapper.protoc.OSMContainer$Way) -> a
    boolean isInitialized() -> isInitialized
    com.chunkmapper.protoc.OSMContainer$Way$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
    com.google.protobuf.GeneratedMessage$Builder clear() -> clear
    com.google.protobuf.GeneratedMessage$Builder clone() -> clone
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder clear() -> clear
    com.google.protobuf.AbstractMessage$Builder clone() -> clone
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.Message$Builder clone() -> clone
    com.google.protobuf.Message buildPartial() -> buildPartial
    com.google.protobuf.Message build() -> build
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.Message$Builder clear() -> clear
    com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.MessageLite$Builder clone() -> clone
    com.google.protobuf.MessageLite buildPartial() -> buildPartial
    com.google.protobuf.MessageLite build() -> build
    com.google.protobuf.MessageLite$Builder clear() -> clear
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessageLite$Builder clone() -> clone
    java.lang.Object clone() -> clone
    com.chunkmapper.protoc.OSMContainer$Way$Builder access$2800() -> a
com.chunkmapper.protoc.SchematicProtocol -> com.chunkmapper.m.u:
    com.google.protobuf.Descriptors$Descriptor internal_static_Schematic_descriptor -> a
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internal_static_Schematic_fieldAccessorTable -> b
    com.google.protobuf.Descriptors$FileDescriptor descriptor -> c
    com.google.protobuf.Descriptors$FileDescriptor getDescriptor() -> a
    com.google.protobuf.Descriptors$Descriptor access$000() -> b
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$100() -> c
    com.google.protobuf.Descriptors$FileDescriptor access$1302(com.google.protobuf.Descriptors$FileDescriptor) -> a
    com.google.protobuf.Descriptors$Descriptor access$002(com.google.protobuf.Descriptors$Descriptor) -> a
    com.google.protobuf.GeneratedMessage$FieldAccessorTable access$102(com.google.protobuf.GeneratedMessage$FieldAccessorTable) -> a
com.chunkmapper.protoc.SchematicProtocol$1 -> com.chunkmapper.m.v:
    com.google.protobuf.ExtensionRegistry assignDescriptors(com.google.protobuf.Descriptors$FileDescriptor) -> assignDescriptors
com.chunkmapper.protoc.SchematicProtocol$Schematic -> com.chunkmapper.m.w:
    com.chunkmapper.protoc.SchematicProtocol$Schematic defaultInstance -> b
    com.google.protobuf.UnknownFieldSet unknownFields -> c
    com.google.protobuf.Parser PARSER -> a
    int bitField0_ -> d
    com.google.protobuf.ByteString blockData_ -> e
    com.google.protobuf.ByteString dataData_ -> f
    int x_ -> g
    int y_ -> h
    int z_ -> i
    byte memoizedIsInitialized -> j
    int memoizedSerializedSize -> k
    com.chunkmapper.protoc.SchematicProtocol$Schematic getDefaultInstance() -> a
    com.google.protobuf.UnknownFieldSet getUnknownFields() -> getUnknownFields
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.google.protobuf.Parser getParserForType() -> getParserForType
    boolean hasBlockData() -> b
    com.google.protobuf.ByteString getBlockData() -> c
    boolean hasDataData() -> d
    com.google.protobuf.ByteString getDataData() -> e
    boolean hasX() -> f
    int getX() -> g
    boolean hasY() -> h
    int getY() -> i
    boolean hasZ() -> j
    int getZ() -> k
    void initFields() -> m
    boolean isInitialized() -> isInitialized
    void writeTo(com.google.protobuf.CodedOutputStream) -> writeTo
    int getSerializedSize() -> getSerializedSize
    java.lang.Object writeReplace() -> writeReplace
    com.chunkmapper.protoc.SchematicProtocol$Schematic parseFrom(byte[]) -> a
    com.chunkmapper.protoc.SchematicProtocol$Schematic$Builder toBuilder() -> n
    com.google.protobuf.Message$Builder newBuilderForType(com.google.protobuf.GeneratedMessage$BuilderParent) -> newBuilderForType
    com.google.protobuf.Message$Builder toBuilder() -> toBuilder
    com.google.protobuf.Message$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite$Builder toBuilder() -> toBuilder
    com.google.protobuf.MessageLite$Builder newBuilderForType() -> newBuilderForType
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    boolean access$500() -> l
    com.google.protobuf.ByteString access$702(com.chunkmapper.protoc.SchematicProtocol$Schematic,com.google.protobuf.ByteString) -> a
    com.google.protobuf.ByteString access$802(com.chunkmapper.protoc.SchematicProtocol$Schematic,com.google.protobuf.ByteString) -> b
    int access$902(com.chunkmapper.protoc.SchematicProtocol$Schematic,int) -> a
    int access$1002(com.chunkmapper.protoc.SchematicProtocol$Schematic,int) -> b
    int access$1102(com.chunkmapper.protoc.SchematicProtocol$Schematic,int) -> c
    int access$1202(com.chunkmapper.protoc.SchematicProtocol$Schematic,int) -> d
com.chunkmapper.protoc.SchematicProtocol$Schematic$1 -> com.chunkmapper.m.x:
    java.lang.Object parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> parsePartialFrom
com.chunkmapper.protoc.SchematicProtocol$Schematic$Builder -> com.chunkmapper.m.y:
    int bitField0_ -> a
    com.google.protobuf.ByteString blockData_ -> b
    com.google.protobuf.ByteString dataData_ -> c
    int x_ -> d
    int y_ -> e
    int z_ -> f
    com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable() -> internalGetFieldAccessorTable
    com.chunkmapper.protoc.SchematicProtocol$Schematic$Builder clear() -> b
    com.chunkmapper.protoc.SchematicProtocol$Schematic$Builder clone() -> c
    com.google.protobuf.Descriptors$Descriptor getDescriptorForType() -> getDescriptorForType
    com.chunkmapper.protoc.SchematicProtocol$Schematic build() -> d
    com.chunkmapper.protoc.SchematicProtocol$Schematic buildPartial() -> e
    com.chunkmapper.protoc.SchematicProtocol$Schematic$Builder mergeFrom(com.google.protobuf.Message) -> a
    com.chunkmapper.protoc.SchematicProtocol$Schematic$Builder mergeFrom(com.chunkmapper.protoc.SchematicProtocol$Schematic) -> a
    boolean isInitialized() -> isInitialized
    com.chunkmapper.protoc.SchematicProtocol$Schematic$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> a
    com.google.protobuf.GeneratedMessage$Builder clear() -> clear
    com.google.protobuf.GeneratedMessage$Builder clone() -> clone
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.AbstractMessage$Builder clear() -> clear
    com.google.protobuf.AbstractMessage$Builder clone() -> clone
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.Message$Builder clone() -> clone
    com.google.protobuf.Message buildPartial() -> buildPartial
    com.google.protobuf.Message build() -> build
    com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.Message) -> mergeFrom
    com.google.protobuf.Message$Builder clear() -> clear
    com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.MessageLite$Builder clone() -> clone
    com.google.protobuf.MessageLite buildPartial() -> buildPartial
    com.google.protobuf.MessageLite build() -> build
    com.google.protobuf.MessageLite$Builder clear() -> clear
    com.google.protobuf.MessageLite getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.Message getDefaultInstanceForType() -> getDefaultInstanceForType
    com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite) -> mergeFrom
    com.google.protobuf.AbstractMessageLite$Builder clone() -> clone
    java.lang.Object clone() -> clone
    com.chunkmapper.protoc.SchematicProtocol$Schematic$Builder access$300() -> a
com.chunkmapper.protoc.admin.HeightsInfo -> com.chunkmapper.m.a.a:
    java.util.HashSet points -> a
    java.lang.Object key -> b
    boolean hasPoint(int,int) -> a
com.chunkmapper.protoc.wrapper.SchematicProtocolWrapper -> com.chunkmapper.m.b.a:
    int xmax -> a
    int ymax -> b
    int zmax -> c
    byte[][][] data -> d
    byte[][][] blocks -> e
com.chunkmapper.rail.HeightsCache -> com.chunkmapper.n.a:
    java.io.File HEIGHTS_CACHE -> a
    com.chunkmapper.Point regionPoint -> b
    short[][] data -> c
    java.io.File heightsCacheFile -> d
    boolean stale -> e
    java.lang.Object masterLock -> f
    java.util.HashMap lockMap -> g
    java.lang.Object pointLock -> h
    com.chunkmapper.Point getPoint(com.chunkmapper.Point) -> a
    void deleteCache() -> a
    void save() -> b
    short getHeight(int,int) -> a
    void setHeight(int,int,short) -> a
com.chunkmapper.rail.HeightsManager -> com.chunkmapper.n.b:
    com.chunkmapper.rail.HeightsCache cache -> a
    com.chunkmapper.rail.RailTypeCache railTypeCache -> b
    int verticalExaggeration -> c
    int regionx -> d
    int regionz -> e
    com.chunkmapper.column.AbstractColumn[][] cols -> f
    com.chunkmapper.Point originPoint -> g
    int getHeight(int,int) -> a
    boolean hasRail(int,int) -> b
    void setRailType(int,int,byte) -> b
    void setBoth(int,int,int,byte) -> a
    void save() -> a
    boolean hasRailij(int,int) -> c
    void setRailTypeij(int,int,byte) -> a
com.chunkmapper.rail.RailTypeCache -> com.chunkmapper.n.c:
    java.io.File CACHE -> b
    com.chunkmapper.Point regionPoint -> a
    byte[][] data -> c
    java.io.File cacheFile -> d
    boolean stale -> e
    java.lang.Object masterLock -> f
    java.util.HashMap lockMap -> g
    java.lang.Object pointLock -> h
    com.chunkmapper.Point getPoint(com.chunkmapper.Point) -> a
    void save() -> a
    byte getRailType(int,int) -> a
    void setRailType(int,int,byte) -> a
com.chunkmapper.reader.DensityReader -> com.chunkmapper.o.a:
    java.util.ArrayList populationCenters -> a
    double getDensityxz(int,int) -> a
com.chunkmapper.reader.DensityReader$PopulationCenter -> com.chunkmapper.o.b:
    int absx -> a
    int absz -> b
    double a -> c
    double R -> d
    double getPopulationDensity(int,int) -> a
com.chunkmapper.reader.FarmTypeReader -> com.chunkmapper.o.c:
    int[][] blockTypes$7576ff18 -> a
    int getFarmType$69ba56a9(int,int) -> a
com.chunkmapper.reader.FerryReader -> com.chunkmapper.o.d:
    boolean[][] hasFerry -> a
    boolean hasAFerry -> b
    void interpolate(boolean[][],com.chunkmapper.Point,com.chunkmapper.Point,int,int) -> a
com.chunkmapper.reader.FileNotYetAvailableException -> com.chunkmapper.o.e:
com.chunkmapper.reader.GlacierReader -> com.chunkmapper.o.f:
    boolean[][] hasGlacier -> a
    java.lang.Object wrappedGet(java.util.ArrayList,int) -> a
    boolean hasGlacierij(int,int) -> a
    java.util.HashSet getLakes$2c5d02a4(com.chunkmapper.parser.OverpassObject) -> a
com.chunkmapper.reader.GlobcoverReader -> com.chunkmapper.o.g:
    int getGlobcover$43aed662(int,int) -> a
    boolean mostlyLand() -> a
com.chunkmapper.reader.GlobcoverReaderImpl2 -> com.chunkmapper.o.h:
    java.io.File CACHE_DIR -> a
    int datax -> b
    int dataz -> c
    int[][] data$4aa838c1 -> d
    java.lang.Boolean mostlyLand -> e
    java.util.Random random -> f
    int probRound(double) -> a
    int getGlobcover$43aed662(int,int) -> a
    boolean mostlyLand() -> a
com.chunkmapper.reader.HasHouseReader -> com.chunkmapper.o.i:
    float[][] data -> a
    java.util.Random random -> b
    boolean hasHouse(int,int) -> a
com.chunkmapper.reader.HeightsReader -> com.chunkmapper.o.j:
    boolean isAllWater() -> a
    int[][] getHeights(int,int) -> a
    short getHeightxz(int,int) -> b
    short getHeightij(int,int) -> c
    int getRealHeightij(int,int) -> d
com.chunkmapper.reader.HeightsReaderS3 -> com.chunkmapper.o.k:
    short[][] data -> a
    int x0 -> b
    int z0 -> c
    int verticalExaggeration -> d
    boolean allWater -> e
    boolean isAllWater() -> a
    int[][] getHeights(int,int) -> a
    short getHeightxz(int,int) -> b
    short getHeightij(int,int) -> c
    int getRealHeightij(int,int) -> d
com.chunkmapper.reader.HutReader -> com.chunkmapper.o.l:
    java.util.ArrayList huts -> a
    void addHut(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.reader.HutReader$Hut -> com.chunkmapper.o.m:
    com.chunkmapper.Point point -> a
    java.lang.String name -> b
com.chunkmapper.reader.LakeReader -> com.chunkmapper.o.n:
    boolean[][] hasWater -> a
    boolean hasWaterij(int,int) -> a
    java.util.HashSet getLakes$2c5d02a4(com.chunkmapper.parser.OverpassObject) -> a
    java.lang.Object wrappedGet(java.util.ArrayList,int) -> a
com.chunkmapper.reader.NameReader -> com.chunkmapper.o.o:
    java.util.Random random -> a
    java.util.ArrayList names -> b
    java.lang.String getName() -> a
com.chunkmapper.reader.OrchardReader -> com.chunkmapper.o.p:
    boolean[][] hasOrchard -> a
    void paintSections(java.util.ArrayList,int,int) -> a
    java.lang.Object wrappedGet(java.util.ArrayList,int) -> a
    void addVineyard(com.chunkmapper.parser.OverpassObject$Way,java.util.ArrayList) -> a
com.chunkmapper.reader.POIReader -> com.chunkmapper.o.q:
    java.util.Collection pois -> b
    java.util.ArrayList specialPlaces -> a
    void addSigns(com.chunkmapper.chunk.Chunk) -> a
    void addSpecialLandmarks(com.chunkmapper.chunk.Chunk) -> b
com.chunkmapper.reader.POIReader$SpecialPlace -> com.chunkmapper.o.r:
    java.lang.String[] text -> a
    int chunkx -> b
    int chunkz -> c
    int absx -> d
    int absz -> e
    double[] latlon -> f
    java.lang.String toString() -> toString
com.chunkmapper.reader.PathReader -> com.chunkmapper.o.s:
    boolean[][] hasPath -> a
    void interpolate(boolean[][],com.chunkmapper.Point,com.chunkmapper.Point,int,int) -> a
com.chunkmapper.reader.RugbyReader -> com.chunkmapper.o.t:
    java.util.Collection pois -> a
    com.chunkmapper.reader.RugbyReader$RugbyField getRugbyField(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.reader.RugbyReader$RugbyField -> com.chunkmapper.o.u:
    java.lang.String name -> a
com.chunkmapper.reader.VineyardReader -> com.chunkmapper.o.v:
    boolean[][] hasVineyard -> a
    void paintSections(java.util.ArrayList,int,int) -> a
    java.lang.Object wrappedGet(java.util.ArrayList,int) -> a
    void addVineyard(com.chunkmapper.parser.OverpassObject$Way,java.util.ArrayList) -> a
com.chunkmapper.reader.VolcanoReader -> com.chunkmapper.o.w:
    java.util.ArrayList nodes -> a
    void addHotRocks(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.reader.XapiBoundaryReader -> com.chunkmapper.o.x:
    boolean[][] data -> a
    java.util.ArrayList stringPoints -> b
    boolean hasBorder -> c
    void interpolate(boolean[][],com.chunkmapper.Point,com.chunkmapper.Point,int,int) -> a
    void addBoundariesToChunk(int,int,com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.reader.XapiBoundaryReader$StringPoint -> com.chunkmapper.o.y:
    java.lang.String string -> a
    com.chunkmapper.Point point -> b
com.chunkmapper.reader.XapiCoastlineReader -> com.chunkmapper.o.z:
    int[][] data -> a
    void interpolate(int[][],com.chunkmapper.Point,com.chunkmapper.Point,int,int,int,int) -> a
    void floodFill(int[][],int,int,int,int) -> a
com.chunkmapper.reader.XapiHighwayReader -> com.chunkmapper.o.aa:
    short[][] heights -> b
    boolean[][] hasBridge -> c
    java.lang.String[][] names -> d
    boolean hasHighways -> a
    short[] smoothHeights(short[]) -> a
    java.util.ArrayList interpolate(com.chunkmapper.Point,com.chunkmapper.Point,int,int) -> a
    boolean addRoad(int,int,com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.reader.XapiRailReader -> com.chunkmapper.o.ab:
    short[][] heights -> a
    byte[][] railType -> c
    boolean hasRails -> b
    int x0 -> d
    int z0 -> e
    void smoothHeights(int[]) -> a
    boolean inside(int,int) -> b
    void setBoth(int,int,int,byte) -> a
    byte getRailTypeij(int,int) -> a
com.chunkmapper.reader.XapiRailReader$CP -> com.chunkmapper.o.ac:
    com.chunkmapper.reader.XapiRailReader$CP North -> a
    com.chunkmapper.reader.XapiRailReader$CP East -> b
    com.chunkmapper.reader.XapiRailReader$CP South -> c
    com.chunkmapper.reader.XapiRailReader$CP West -> d
com.chunkmapper.reader.XapiRiverReader -> com.chunkmapper.o.ad:
    byte[][] mask -> a
    boolean hasWaterij(int,int) -> a
    void interpolate(byte[][],com.chunkmapper.Point,com.chunkmapper.Point,int,int) -> a
    void widen(byte[][],com.chunkmapper.reader.HeightsReader) -> a
com.chunkmapper.sections.Boundary -> com.chunkmapper.p.a:
    java.util.ArrayList points -> a
    java.awt.Rectangle bbox -> e
    java.lang.String leftArea -> b
    java.lang.String rightArea -> c
    int adminLevel -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.chunkmapper.sections.Coastline -> com.chunkmapper.p.b:
    java.util.ArrayList points -> a
    java.awt.Rectangle bbox -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
com.chunkmapper.sections.Glacier -> com.chunkmapper.p.c:
    java.util.ArrayList points -> a
    java.awt.Rectangle bbox -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isClosed() -> a
    boolean attach(com.chunkmapper.sections.Glacier) -> a
com.chunkmapper.sections.HighwaySection -> com.chunkmapper.p.d:
    java.util.ArrayList points -> a
    boolean hasBridge -> b
    boolean hasTunnel -> c
    java.awt.Rectangle bbox -> e
    java.lang.String name -> d
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.sections.Lake -> com.chunkmapper.p.e:
    java.util.ArrayList points -> a
    java.awt.Rectangle bbox -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isClosed() -> a
    boolean attach(com.chunkmapper.sections.Lake) -> a
com.chunkmapper.sections.POI -> com.chunkmapper.p.f:
    java.lang.String text -> a
    java.lang.String type -> b
    com.chunkmapper.Point point -> c
    java.lang.Integer population -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.chunkmapper.sections.RailSection -> com.chunkmapper.p.g:
    java.util.ArrayList points -> a
    boolean hasBridge -> b
    boolean hasCutting -> c
    boolean hasEmbankment -> d
    boolean hasTunnel -> e
    java.awt.Rectangle bbox -> f
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.chunkmapper.sections.RenderingSection -> com.chunkmapper.p.h:
    com.chunkmapper.Point a -> a
    com.chunkmapper.Point b -> b
    boolean includeA -> c
    java.lang.Integer getIntersection(int) -> a
com.chunkmapper.sections.RiverSection -> com.chunkmapper.p.i:
    java.util.ArrayList points -> a
com.chunkmapper.sections.Section -> com.chunkmapper.p.j:
com.chunkmapper.security.MySecurityManager -> com.chunkmapper.q.a:
    java.io.File keyFile -> b
    boolean offlineValid -> a
    java.lang.String getRawKey() -> b
    java.lang.String md5(java.lang.String) -> a
    com.chunkmapper.security.MySecurityManager$Status getOnlineStatus(java.lang.String,java.lang.String) -> b
    boolean isOfflineValid() -> a
    com.chunkmapper.security.MySecurityManager$Status getStatus(java.lang.String,java.lang.String) -> a
    boolean mustPurchase(javax.swing.JFrame) -> a
com.chunkmapper.security.MySecurityManager$Status -> com.chunkmapper.q.b:
    com.chunkmapper.security.MySecurityManager$Status OK -> a
    com.chunkmapper.security.MySecurityManager$Status HACKED -> b
    com.chunkmapper.security.MySecurityManager$Status UNPAID -> c
    com.chunkmapper.security.MySecurityManager$Status INVALID_PW -> d
    com.chunkmapper.security.MySecurityManager$Status SSL_EXCEPTION -> e
    com.chunkmapper.security.MySecurityManager$Status[] $VALUES -> f
    com.chunkmapper.security.MySecurityManager$Status[] values() -> a
com.chunkmapper.writer.ArtifactWriter -> com.chunkmapper.r.a:
    int spacesTillNextPoweredRail -> a
    void addWool(com.chunkmapper.chunk.Chunk,int,int,int) -> b
    void addH(com.chunkmapper.chunk.Chunk,int,int,int) -> c
    void addRugbyField(com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.RugbyReader$RugbyField) -> a
    void addTunnelIntoTheUnknown(com.chunkmapper.chunk.Chunk) -> a
    void addSign(com.chunkmapper.chunk.Chunk,int,int,int,java.lang.String[]) -> a
    void addSign(com.chunkmapper.chunk.Chunk,int,int,int,java.lang.String[],byte) -> a
    void addHouse(com.chunkmapper.chunk.Chunk) -> b
    void placeRail(int,int,com.chunkmapper.chunk.Chunk,int,byte,boolean,boolean) -> a
    void makeSideWindow(com.chunkmapper.chunk.Chunk,int,int,int,int) -> a
    void makeBackWindow(com.chunkmapper.chunk.Chunk,int,int,int) -> a
    int getMeanHeight(com.chunkmapper.chunk.Chunk) -> c
    int getMeanHeight(com.chunkmapper.chunk.Chunk,int,int,int,int) -> b
    void placePrison(com.chunkmapper.chunk.Chunk) -> d
    void placeMarket(com.chunkmapper.chunk.Chunk) -> e
com.chunkmapper.writer.FlowerpotWriter -> com.chunkmapper.r.b:
    com.chunkmapper.nbt.ListTag TileEntities1 -> a
    java.util.Random RANDOM -> b
    com.chunkmapper.nbt.CompoundTag getRandomFlowerpot(int,int,int) -> a
com.chunkmapper.writer.GenericWriter -> com.chunkmapper.r.c:
    java.util.Random RANDOM -> h
    int COAL_WIDTH -> a
    int IRON_WIDTH -> b
    int REDSTONE_WIDTH -> c
    int DIAMOND_WIDTH -> d
    int EMERALD_WIDTH -> e
    int GOLD_WIDTH -> f
    int LAPIS_LAZULI_WIDTH -> g
    void addHeavenWaterFall(com.chunkmapper.chunk.Chunk) -> a
    void addNorthGlassWall(com.chunkmapper.chunk.Chunk) -> b
    void addBedrock(com.chunkmapper.chunk.Chunk) -> c
com.chunkmapper.writer.HorseWriter -> com.chunkmapper.r.d:
    java.util.Random RANDOM -> a
    void addHorse(com.chunkmapper.chunk.Chunk) -> a
com.chunkmapper.writer.LenteTreeWriter -> com.chunkmapper.r.e:
    java.util.HashMap protocols -> a
    void placeLenteTree(int,int,com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader,com.chunkmapper.enumeration.LenteTree) -> a
com.chunkmapper.writer.LevelDat -> com.chunkmapper.r.f:
    com.chunkmapper.nbt.CompoundTag data -> a
    java.io.File store -> b
    void save() -> a
    void setPlayerPosition(double,double,double) -> a
    com.chunkmapper.Point getPlayerPosition() -> b
    void setName(java.lang.String) -> a
com.chunkmapper.writer.LoadedLevelDat -> com.chunkmapper.r.g:
    com.chunkmapper.nbt.CompoundTag data -> a
    java.io.File store -> b
    com.chunkmapper.Point getPlayerPosition() -> a
com.chunkmapper.writer.MobWriter -> com.chunkmapper.r.h:
    java.util.Random RANDOM -> a
    void addVillager(com.chunkmapper.chunk.Chunk,int,double,double,double,boolean) -> a
    void addAnimal(com.chunkmapper.chunk.Chunk,java.lang.String) -> a
com.chunkmapper.writer.NeutralRegionWriter -> com.chunkmapper.r.i:
    int NUM_WRITING_THREADS -> b
    com.chunkmapper.Point rootPoint -> c
    java.io.File regionFolder -> d
    com.chunkmapper.GameMetaInfo gameMetaInfo -> e
    com.chunkmapper.multiplayer.MPPointManager pointManager -> f
    int verticalExaggeration -> g
    com.chunkmapper.interfaces.MappedSquareManager mappedSquareManager -> h
    void doTask(com.chunkmapper.Point) -> b
com.chunkmapper.writer.RegionWriter -> com.chunkmapper.r.j:
    int NUM_WRITING_THREADS -> b
    com.chunkmapper.Point rootPoint -> c
    java.io.File regionFolder -> d
    com.chunkmapper.GameMetaInfo gameMetaInfo -> e
    com.chunkmapper.interfaces.MappedSquareManager mappedSquareManager -> f
    com.chunkmapper.interfaces.PointManager pointManager -> g
    boolean gaiaMode -> h
    int verticalExaggeration -> i
    com.chunkmapper.writer.LevelDat levelDat -> j
    java.util.concurrent.PriorityBlockingQueue taskQueue2 -> k
    com.chunkmapper.Point getTask() -> b
    void addTask(com.chunkmapper.Point) -> a
    void addTask(int,int) -> a
    void blockingShutdownNow() -> a
    void doTask(com.chunkmapper.Point) -> b
    com.chunkmapper.interfaces.PointManager access$000(com.chunkmapper.writer.RegionWriter) -> a
com.chunkmapper.writer.RegionWriter$1 -> com.chunkmapper.r.k:
    com.chunkmapper.writer.RegionWriter this$0 -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.chunkmapper.writer.SchematicArtifactWriter -> com.chunkmapper.r.l:
    com.chunkmapper.protoc.wrapper.SchematicProtocolWrapper hut -> a
    com.chunkmapper.protoc.wrapper.SchematicProtocolWrapper apartmentFloor -> b
    com.chunkmapper.protoc.wrapper.SchematicProtocolWrapper apartmentFloor2 -> c
    com.chunkmapper.protoc.wrapper.SchematicProtocolWrapper[] apartmentRoofs -> d
    java.util.Random RANDOM -> e
    void addHut(com.chunkmapper.chunk.Chunk,java.lang.String) -> a
    java.lang.Object randomNth(java.lang.Object[]) -> a
    void addApartment(com.chunkmapper.chunk.Chunk,int) -> a
com.chunkmapper.writer.TreeWriter -> com.chunkmapper.r.m:
    java.util.Random RANDOM -> a
    int getForestTreeHeight() -> a
    int getSavannaTreeHeight() -> b
    void placeSavannaTree(int,int,com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader,int) -> a
    void placeOrchardTree$3e800cea(int,int,com.chunkmapper.chunk.Chunk,com.chunkmapper.reader.HeightsReader) -> a
