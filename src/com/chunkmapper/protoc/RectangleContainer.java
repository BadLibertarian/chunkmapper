// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PATH/RectangleContainer.proto

package com.chunkmapper.protoc;

public final class RectangleContainer {
  private RectangleContainer() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface RectangleOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required int32 x = 1;
    /**
     * <code>required int32 x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>required int32 x = 1;</code>
     */
    int getX();

    // required int32 z = 2;
    /**
     * <code>required int32 z = 2;</code>
     */
    boolean hasZ();
    /**
     * <code>required int32 z = 2;</code>
     */
    int getZ();

    // required int32 width = 3;
    /**
     * <code>required int32 width = 3;</code>
     */
    boolean hasWidth();
    /**
     * <code>required int32 width = 3;</code>
     */
    int getWidth();

    // required int32 height = 4;
    /**
     * <code>required int32 height = 4;</code>
     */
    boolean hasHeight();
    /**
     * <code>required int32 height = 4;</code>
     */
    int getHeight();
  }
  /**
   * Protobuf type {@code Rectangle}
   */
  public static final class Rectangle extends
      com.google.protobuf.GeneratedMessageLite
      implements RectangleOrBuilder {
    // Use Rectangle.newBuilder() to construct.
    private Rectangle(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Rectangle(boolean noInit) {}

    private static final Rectangle defaultInstance;
    public static Rectangle getDefaultInstance() {
      return defaultInstance;
    }

    public Rectangle getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Rectangle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              z_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              width_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              height_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Rectangle> PARSER =
        new com.google.protobuf.AbstractParser<Rectangle>() {
      public Rectangle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Rectangle(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Rectangle> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <code>required int32 x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 x = 1;</code>
     */
    public int getX() {
      return x_;
    }

    // required int32 z = 2;
    public static final int Z_FIELD_NUMBER = 2;
    private int z_;
    /**
     * <code>required int32 z = 2;</code>
     */
    public boolean hasZ() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 z = 2;</code>
     */
    public int getZ() {
      return z_;
    }

    // required int32 width = 3;
    public static final int WIDTH_FIELD_NUMBER = 3;
    private int width_;
    /**
     * <code>required int32 width = 3;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 width = 3;</code>
     */
    public int getWidth() {
      return width_;
    }

    // required int32 height = 4;
    public static final int HEIGHT_FIELD_NUMBER = 4;
    private int height_;
    /**
     * <code>required int32 height = 4;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 height = 4;</code>
     */
    public int getHeight() {
      return height_;
    }

    private void initFields() {
      x_ = 0;
      z_ = 0;
      width_ = 0;
      height_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, z_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, height_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, z_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, height_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.RectangleContainer.Rectangle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.chunkmapper.protoc.RectangleContainer.Rectangle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code Rectangle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.chunkmapper.protoc.RectangleContainer.Rectangle, Builder>
        implements com.chunkmapper.protoc.RectangleContainer.RectangleOrBuilder {
      // Construct using com.chunkmapper.protoc.RectangleContainer.Rectangle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        z_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.chunkmapper.protoc.RectangleContainer.Rectangle getDefaultInstanceForType() {
        return com.chunkmapper.protoc.RectangleContainer.Rectangle.getDefaultInstance();
      }

      public com.chunkmapper.protoc.RectangleContainer.Rectangle build() {
        com.chunkmapper.protoc.RectangleContainer.Rectangle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.chunkmapper.protoc.RectangleContainer.Rectangle buildPartial() {
        com.chunkmapper.protoc.RectangleContainer.Rectangle result = new com.chunkmapper.protoc.RectangleContainer.Rectangle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.z_ = z_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.height_ = height_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.chunkmapper.protoc.RectangleContainer.Rectangle other) {
        if (other == com.chunkmapper.protoc.RectangleContainer.Rectangle.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasZ()) {
          
          return false;
        }
        if (!hasWidth()) {
          
          return false;
        }
        if (!hasHeight()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.chunkmapper.protoc.RectangleContainer.Rectangle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.chunkmapper.protoc.RectangleContainer.Rectangle) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 x = 1;
      private int x_ ;
      /**
       * <code>required int32 x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 x = 1;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required int32 x = 1;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        
        return this;
      }
      /**
       * <code>required int32 x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        
        return this;
      }

      // required int32 z = 2;
      private int z_ ;
      /**
       * <code>required int32 z = 2;</code>
       */
      public boolean hasZ() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 z = 2;</code>
       */
      public int getZ() {
        return z_;
      }
      /**
       * <code>required int32 z = 2;</code>
       */
      public Builder setZ(int value) {
        bitField0_ |= 0x00000002;
        z_ = value;
        
        return this;
      }
      /**
       * <code>required int32 z = 2;</code>
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000002);
        z_ = 0;
        
        return this;
      }

      // required int32 width = 3;
      private int width_ ;
      /**
       * <code>required int32 width = 3;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 width = 3;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>required int32 width = 3;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000004;
        width_ = value;
        
        return this;
      }
      /**
       * <code>required int32 width = 3;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        
        return this;
      }

      // required int32 height = 4;
      private int height_ ;
      /**
       * <code>required int32 height = 4;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 height = 4;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>required int32 height = 4;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000008;
        height_ = value;
        
        return this;
      }
      /**
       * <code>required int32 height = 4;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000008);
        height_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Rectangle)
    }

    static {
      defaultInstance = new Rectangle(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Rectangle)
  }

  public interface RectangleListOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // repeated .Rectangle rectangles = 1;
    /**
     * <code>repeated .Rectangle rectangles = 1;</code>
     */
    java.util.List<com.chunkmapper.protoc.RectangleContainer.Rectangle> 
        getRectanglesList();
    /**
     * <code>repeated .Rectangle rectangles = 1;</code>
     */
    com.chunkmapper.protoc.RectangleContainer.Rectangle getRectangles(int index);
    /**
     * <code>repeated .Rectangle rectangles = 1;</code>
     */
    int getRectanglesCount();
  }
  /**
   * Protobuf type {@code RectangleList}
   */
  public static final class RectangleList extends
      com.google.protobuf.GeneratedMessageLite
      implements RectangleListOrBuilder {
    // Use RectangleList.newBuilder() to construct.
    private RectangleList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private RectangleList(boolean noInit) {}

    private static final RectangleList defaultInstance;
    public static RectangleList getDefaultInstance() {
      return defaultInstance;
    }

    public RectangleList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private RectangleList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                rectangles_ = new java.util.ArrayList<com.chunkmapper.protoc.RectangleContainer.Rectangle>();
                mutable_bitField0_ |= 0x00000001;
              }
              rectangles_.add(input.readMessage(com.chunkmapper.protoc.RectangleContainer.Rectangle.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          rectangles_ = java.util.Collections.unmodifiableList(rectangles_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RectangleList> PARSER =
        new com.google.protobuf.AbstractParser<RectangleList>() {
      public RectangleList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RectangleList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RectangleList> getParserForType() {
      return PARSER;
    }

    // repeated .Rectangle rectangles = 1;
    public static final int RECTANGLES_FIELD_NUMBER = 1;
    private java.util.List<com.chunkmapper.protoc.RectangleContainer.Rectangle> rectangles_;
    /**
     * <code>repeated .Rectangle rectangles = 1;</code>
     */
    public java.util.List<com.chunkmapper.protoc.RectangleContainer.Rectangle> getRectanglesList() {
      return rectangles_;
    }
    /**
     * <code>repeated .Rectangle rectangles = 1;</code>
     */
    public java.util.List<? extends com.chunkmapper.protoc.RectangleContainer.RectangleOrBuilder> 
        getRectanglesOrBuilderList() {
      return rectangles_;
    }
    /**
     * <code>repeated .Rectangle rectangles = 1;</code>
     */
    public int getRectanglesCount() {
      return rectangles_.size();
    }
    /**
     * <code>repeated .Rectangle rectangles = 1;</code>
     */
    public com.chunkmapper.protoc.RectangleContainer.Rectangle getRectangles(int index) {
      return rectangles_.get(index);
    }
    /**
     * <code>repeated .Rectangle rectangles = 1;</code>
     */
    public com.chunkmapper.protoc.RectangleContainer.RectangleOrBuilder getRectanglesOrBuilder(
        int index) {
      return rectangles_.get(index);
    }

    private void initFields() {
      rectangles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getRectanglesCount(); i++) {
        if (!getRectangles(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < rectangles_.size(); i++) {
        output.writeMessage(1, rectangles_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < rectangles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, rectangles_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.RectangleContainer.RectangleList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.chunkmapper.protoc.RectangleContainer.RectangleList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code RectangleList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.chunkmapper.protoc.RectangleContainer.RectangleList, Builder>
        implements com.chunkmapper.protoc.RectangleContainer.RectangleListOrBuilder {
      // Construct using com.chunkmapper.protoc.RectangleContainer.RectangleList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rectangles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.chunkmapper.protoc.RectangleContainer.RectangleList getDefaultInstanceForType() {
        return com.chunkmapper.protoc.RectangleContainer.RectangleList.getDefaultInstance();
      }

      public com.chunkmapper.protoc.RectangleContainer.RectangleList build() {
        com.chunkmapper.protoc.RectangleContainer.RectangleList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.chunkmapper.protoc.RectangleContainer.RectangleList buildPartial() {
        com.chunkmapper.protoc.RectangleContainer.RectangleList result = new com.chunkmapper.protoc.RectangleContainer.RectangleList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          rectangles_ = java.util.Collections.unmodifiableList(rectangles_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.rectangles_ = rectangles_;
        return result;
      }

      public Builder mergeFrom(com.chunkmapper.protoc.RectangleContainer.RectangleList other) {
        if (other == com.chunkmapper.protoc.RectangleContainer.RectangleList.getDefaultInstance()) return this;
        if (!other.rectangles_.isEmpty()) {
          if (rectangles_.isEmpty()) {
            rectangles_ = other.rectangles_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureRectanglesIsMutable();
            rectangles_.addAll(other.rectangles_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getRectanglesCount(); i++) {
          if (!getRectangles(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.chunkmapper.protoc.RectangleContainer.RectangleList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.chunkmapper.protoc.RectangleContainer.RectangleList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Rectangle rectangles = 1;
      private java.util.List<com.chunkmapper.protoc.RectangleContainer.Rectangle> rectangles_ =
        java.util.Collections.emptyList();
      private void ensureRectanglesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          rectangles_ = new java.util.ArrayList<com.chunkmapper.protoc.RectangleContainer.Rectangle>(rectangles_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public java.util.List<com.chunkmapper.protoc.RectangleContainer.Rectangle> getRectanglesList() {
        return java.util.Collections.unmodifiableList(rectangles_);
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public int getRectanglesCount() {
        return rectangles_.size();
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public com.chunkmapper.protoc.RectangleContainer.Rectangle getRectangles(int index) {
        return rectangles_.get(index);
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder setRectangles(
          int index, com.chunkmapper.protoc.RectangleContainer.Rectangle value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRectanglesIsMutable();
        rectangles_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder setRectangles(
          int index, com.chunkmapper.protoc.RectangleContainer.Rectangle.Builder builderForValue) {
        ensureRectanglesIsMutable();
        rectangles_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder addRectangles(com.chunkmapper.protoc.RectangleContainer.Rectangle value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRectanglesIsMutable();
        rectangles_.add(value);

        return this;
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder addRectangles(
          int index, com.chunkmapper.protoc.RectangleContainer.Rectangle value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRectanglesIsMutable();
        rectangles_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder addRectangles(
          com.chunkmapper.protoc.RectangleContainer.Rectangle.Builder builderForValue) {
        ensureRectanglesIsMutable();
        rectangles_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder addRectangles(
          int index, com.chunkmapper.protoc.RectangleContainer.Rectangle.Builder builderForValue) {
        ensureRectanglesIsMutable();
        rectangles_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder addAllRectangles(
          java.lang.Iterable<? extends com.chunkmapper.protoc.RectangleContainer.Rectangle> values) {
        ensureRectanglesIsMutable();
        super.addAll(values, rectangles_);

        return this;
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder clearRectangles() {
        rectangles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .Rectangle rectangles = 1;</code>
       */
      public Builder removeRectangles(int index) {
        ensureRectanglesIsMutable();
        rectangles_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:RectangleList)
    }

    static {
      defaultInstance = new RectangleList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:RectangleList)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
