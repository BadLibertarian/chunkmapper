// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SchematicProtocol.proto

package com.chunkmapper.protoc;

public final class SchematicProtocol {
  private SchematicProtocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface SchematicOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // required bytes block_data = 1;
    /**
     * <code>required bytes block_data = 1;</code>
     */
    boolean hasBlockData();
    /**
     * <code>required bytes block_data = 1;</code>
     */
    com.google.protobuf.ByteString getBlockData();

    // required bytes data_data = 2;
    /**
     * <code>required bytes data_data = 2;</code>
     */
    boolean hasDataData();
    /**
     * <code>required bytes data_data = 2;</code>
     */
    com.google.protobuf.ByteString getDataData();

    // required int32 x = 3;
    /**
     * <code>required int32 x = 3;</code>
     */
    boolean hasX();
    /**
     * <code>required int32 x = 3;</code>
     */
    int getX();

    // required int32 y = 4;
    /**
     * <code>required int32 y = 4;</code>
     */
    boolean hasY();
    /**
     * <code>required int32 y = 4;</code>
     */
    int getY();

    // required int32 z = 5;
    /**
     * <code>required int32 z = 5;</code>
     */
    boolean hasZ();
    /**
     * <code>required int32 z = 5;</code>
     */
    int getZ();
  }
  /**
   * Protobuf type {@code Schematic}
   */
  public static final class Schematic extends
      com.google.protobuf.GeneratedMessageLite
      implements SchematicOrBuilder {
    // Use Schematic.newBuilder() to construct.
    private Schematic(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private Schematic(boolean noInit) {}

    private static final Schematic defaultInstance;
    public static Schematic getDefaultInstance() {
      return defaultInstance;
    }

    public Schematic getDefaultInstanceForType() {
      return defaultInstance;
    }

    private Schematic(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              blockData_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              dataData_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              x_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              y_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              z_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Schematic> PARSER =
        new com.google.protobuf.AbstractParser<Schematic>() {
      public Schematic parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Schematic(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Schematic> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes block_data = 1;
    public static final int BLOCK_DATA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString blockData_;
    /**
     * <code>required bytes block_data = 1;</code>
     */
    public boolean hasBlockData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes block_data = 1;</code>
     */
    public com.google.protobuf.ByteString getBlockData() {
      return blockData_;
    }

    // required bytes data_data = 2;
    public static final int DATA_DATA_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString dataData_;
    /**
     * <code>required bytes data_data = 2;</code>
     */
    public boolean hasDataData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes data_data = 2;</code>
     */
    public com.google.protobuf.ByteString getDataData() {
      return dataData_;
    }

    // required int32 x = 3;
    public static final int X_FIELD_NUMBER = 3;
    private int x_;
    /**
     * <code>required int32 x = 3;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 x = 3;</code>
     */
    public int getX() {
      return x_;
    }

    // required int32 y = 4;
    public static final int Y_FIELD_NUMBER = 4;
    private int y_;
    /**
     * <code>required int32 y = 4;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 y = 4;</code>
     */
    public int getY() {
      return y_;
    }

    // required int32 z = 5;
    public static final int Z_FIELD_NUMBER = 5;
    private int z_;
    /**
     * <code>required int32 z = 5;</code>
     */
    public boolean hasZ() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 z = 5;</code>
     */
    public int getZ() {
      return z_;
    }

    private void initFields() {
      blockData_ = com.google.protobuf.ByteString.EMPTY;
      dataData_ = com.google.protobuf.ByteString.EMPTY;
      x_ = 0;
      y_ = 0;
      z_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasBlockData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDataData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, blockData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, dataData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, x_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, y_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, z_);
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, blockData_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, dataData_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, x_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, y_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, z_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.SchematicProtocol.Schematic parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.chunkmapper.protoc.SchematicProtocol.Schematic prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code Schematic}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.chunkmapper.protoc.SchematicProtocol.Schematic, Builder>
        implements com.chunkmapper.protoc.SchematicProtocol.SchematicOrBuilder {
      // Construct using com.chunkmapper.protoc.SchematicProtocol.Schematic.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        blockData_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        dataData_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        z_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.chunkmapper.protoc.SchematicProtocol.Schematic getDefaultInstanceForType() {
        return com.chunkmapper.protoc.SchematicProtocol.Schematic.getDefaultInstance();
      }

      public com.chunkmapper.protoc.SchematicProtocol.Schematic build() {
        com.chunkmapper.protoc.SchematicProtocol.Schematic result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.chunkmapper.protoc.SchematicProtocol.Schematic buildPartial() {
        com.chunkmapper.protoc.SchematicProtocol.Schematic result = new com.chunkmapper.protoc.SchematicProtocol.Schematic(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.blockData_ = blockData_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.dataData_ = dataData_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.z_ = z_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.chunkmapper.protoc.SchematicProtocol.Schematic other) {
        if (other == com.chunkmapper.protoc.SchematicProtocol.Schematic.getDefaultInstance()) return this;
        if (other.hasBlockData()) {
          setBlockData(other.getBlockData());
        }
        if (other.hasDataData()) {
          setDataData(other.getDataData());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        return this;
      }

      public final boolean isInitialized() {
        if (!hasBlockData()) {
          
          return false;
        }
        if (!hasDataData()) {
          
          return false;
        }
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasZ()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.chunkmapper.protoc.SchematicProtocol.Schematic parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.chunkmapper.protoc.SchematicProtocol.Schematic) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes block_data = 1;
      private com.google.protobuf.ByteString blockData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes block_data = 1;</code>
       */
      public boolean hasBlockData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes block_data = 1;</code>
       */
      public com.google.protobuf.ByteString getBlockData() {
        return blockData_;
      }
      /**
       * <code>required bytes block_data = 1;</code>
       */
      public Builder setBlockData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        blockData_ = value;
        
        return this;
      }
      /**
       * <code>required bytes block_data = 1;</code>
       */
      public Builder clearBlockData() {
        bitField0_ = (bitField0_ & ~0x00000001);
        blockData_ = getDefaultInstance().getBlockData();
        
        return this;
      }

      // required bytes data_data = 2;
      private com.google.protobuf.ByteString dataData_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes data_data = 2;</code>
       */
      public boolean hasDataData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes data_data = 2;</code>
       */
      public com.google.protobuf.ByteString getDataData() {
        return dataData_;
      }
      /**
       * <code>required bytes data_data = 2;</code>
       */
      public Builder setDataData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        dataData_ = value;
        
        return this;
      }
      /**
       * <code>required bytes data_data = 2;</code>
       */
      public Builder clearDataData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        dataData_ = getDefaultInstance().getDataData();
        
        return this;
      }

      // required int32 x = 3;
      private int x_ ;
      /**
       * <code>required int32 x = 3;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 x = 3;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required int32 x = 3;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000004;
        x_ = value;
        
        return this;
      }
      /**
       * <code>required int32 x = 3;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000004);
        x_ = 0;
        
        return this;
      }

      // required int32 y = 4;
      private int y_ ;
      /**
       * <code>required int32 y = 4;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 y = 4;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>required int32 y = 4;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000008;
        y_ = value;
        
        return this;
      }
      /**
       * <code>required int32 y = 4;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000008);
        y_ = 0;
        
        return this;
      }

      // required int32 z = 5;
      private int z_ ;
      /**
       * <code>required int32 z = 5;</code>
       */
      public boolean hasZ() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 z = 5;</code>
       */
      public int getZ() {
        return z_;
      }
      /**
       * <code>required int32 z = 5;</code>
       */
      public Builder setZ(int value) {
        bitField0_ |= 0x00000010;
        z_ = value;
        
        return this;
      }
      /**
       * <code>required int32 z = 5;</code>
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000010);
        z_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Schematic)
    }

    static {
      defaultInstance = new Schematic(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Schematic)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
