// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PATH/FileContainer.proto

package com.chunkmapper.protoc;

public final class FileContainer {
  private FileContainer() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface FileInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string parent = 1;
    /**
     * <code>required string parent = 1;</code>
     */
    boolean hasParent();
    /**
     * <code>required string parent = 1;</code>
     */
    java.lang.String getParent();
    /**
     * <code>required string parent = 1;</code>
     */
    com.google.protobuf.ByteString
        getParentBytes();

    // required string file = 2;
    /**
     * <code>required string file = 2;</code>
     */
    boolean hasFile();
    /**
     * <code>required string file = 2;</code>
     */
    java.lang.String getFile();
    /**
     * <code>required string file = 2;</code>
     */
    com.google.protobuf.ByteString
        getFileBytes();
  }
  /**
   * Protobuf type {@code FileInfo}
   */
  public static final class FileInfo extends
      com.google.protobuf.GeneratedMessage
      implements FileInfoOrBuilder {
    // Use FileInfo.newBuilder() to construct.
    private FileInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileInfo defaultInstance;
    public static FileInfo getDefaultInstance() {
      return defaultInstance;
    }

    public FileInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              parent_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              file_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.chunkmapper.protoc.FileContainer.internal_static_FileInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.chunkmapper.protoc.FileContainer.internal_static_FileInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.chunkmapper.protoc.FileContainer.FileInfo.class, com.chunkmapper.protoc.FileContainer.FileInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<FileInfo> PARSER =
        new com.google.protobuf.AbstractParser<FileInfo>() {
      public FileInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string parent = 1;
    public static final int PARENT_FIELD_NUMBER = 1;
    private java.lang.Object parent_;
    /**
     * <code>required string parent = 1;</code>
     */
    public boolean hasParent() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string parent = 1;</code>
     */
    public java.lang.String getParent() {
      java.lang.Object ref = parent_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          parent_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string parent = 1;</code>
     */
    public com.google.protobuf.ByteString
        getParentBytes() {
      java.lang.Object ref = parent_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        parent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string file = 2;
    public static final int FILE_FIELD_NUMBER = 2;
    private java.lang.Object file_;
    /**
     * <code>required string file = 2;</code>
     */
    public boolean hasFile() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string file = 2;</code>
     */
    public java.lang.String getFile() {
      java.lang.Object ref = file_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          file_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string file = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFileBytes() {
      java.lang.Object ref = file_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        file_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      parent_ = "";
      file_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasParent()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFile()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getParentBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getFileBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getParentBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getFileBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.chunkmapper.protoc.FileContainer.FileInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.FileContainer.FileInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.chunkmapper.protoc.FileContainer.FileInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code FileInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.chunkmapper.protoc.FileContainer.internal_static_FileInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.chunkmapper.protoc.FileContainer.internal_static_FileInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.chunkmapper.protoc.FileContainer.FileInfo.class, com.chunkmapper.protoc.FileContainer.FileInfo.Builder.class);
      }

      // Construct using com.chunkmapper.protoc.FileContainer.FileInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        parent_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        file_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.chunkmapper.protoc.FileContainer.internal_static_FileInfo_descriptor;
      }

      public com.chunkmapper.protoc.FileContainer.FileInfo getDefaultInstanceForType() {
        return com.chunkmapper.protoc.FileContainer.FileInfo.getDefaultInstance();
      }

      public com.chunkmapper.protoc.FileContainer.FileInfo build() {
        com.chunkmapper.protoc.FileContainer.FileInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.chunkmapper.protoc.FileContainer.FileInfo buildPartial() {
        com.chunkmapper.protoc.FileContainer.FileInfo result = new com.chunkmapper.protoc.FileContainer.FileInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.parent_ = parent_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.file_ = file_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.chunkmapper.protoc.FileContainer.FileInfo) {
          return mergeFrom((com.chunkmapper.protoc.FileContainer.FileInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.chunkmapper.protoc.FileContainer.FileInfo other) {
        if (other == com.chunkmapper.protoc.FileContainer.FileInfo.getDefaultInstance()) return this;
        if (other.hasParent()) {
          bitField0_ |= 0x00000001;
          parent_ = other.parent_;
          onChanged();
        }
        if (other.hasFile()) {
          bitField0_ |= 0x00000002;
          file_ = other.file_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasParent()) {
          
          return false;
        }
        if (!hasFile()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.chunkmapper.protoc.FileContainer.FileInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.chunkmapper.protoc.FileContainer.FileInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string parent = 1;
      private java.lang.Object parent_ = "";
      /**
       * <code>required string parent = 1;</code>
       */
      public boolean hasParent() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string parent = 1;</code>
       */
      public java.lang.String getParent() {
        java.lang.Object ref = parent_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          parent_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string parent = 1;</code>
       */
      public com.google.protobuf.ByteString
          getParentBytes() {
        java.lang.Object ref = parent_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          parent_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string parent = 1;</code>
       */
      public Builder setParent(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        parent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string parent = 1;</code>
       */
      public Builder clearParent() {
        bitField0_ = (bitField0_ & ~0x00000001);
        parent_ = getDefaultInstance().getParent();
        onChanged();
        return this;
      }
      /**
       * <code>required string parent = 1;</code>
       */
      public Builder setParentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        parent_ = value;
        onChanged();
        return this;
      }

      // required string file = 2;
      private java.lang.Object file_ = "";
      /**
       * <code>required string file = 2;</code>
       */
      public boolean hasFile() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string file = 2;</code>
       */
      public java.lang.String getFile() {
        java.lang.Object ref = file_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          file_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string file = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFileBytes() {
        java.lang.Object ref = file_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          file_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string file = 2;</code>
       */
      public Builder setFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        file_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string file = 2;</code>
       */
      public Builder clearFile() {
        bitField0_ = (bitField0_ & ~0x00000002);
        file_ = getDefaultInstance().getFile();
        onChanged();
        return this;
      }
      /**
       * <code>required string file = 2;</code>
       */
      public Builder setFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        file_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:FileInfo)
    }

    static {
      defaultInstance = new FileInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:FileInfo)
  }

  public interface FileListOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .FileInfo files = 1;
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    java.util.List<com.chunkmapper.protoc.FileContainer.FileInfo> 
        getFilesList();
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    com.chunkmapper.protoc.FileContainer.FileInfo getFiles(int index);
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    int getFilesCount();
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    java.util.List<? extends com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder> 
        getFilesOrBuilderList();
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder getFilesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code FileList}
   */
  public static final class FileList extends
      com.google.protobuf.GeneratedMessage
      implements FileListOrBuilder {
    // Use FileList.newBuilder() to construct.
    private FileList(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileList(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileList defaultInstance;
    public static FileList getDefaultInstance() {
      return defaultInstance;
    }

    public FileList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                files_ = new java.util.ArrayList<com.chunkmapper.protoc.FileContainer.FileInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              files_.add(input.readMessage(com.chunkmapper.protoc.FileContainer.FileInfo.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          files_ = java.util.Collections.unmodifiableList(files_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.chunkmapper.protoc.FileContainer.internal_static_FileList_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.chunkmapper.protoc.FileContainer.internal_static_FileList_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.chunkmapper.protoc.FileContainer.FileList.class, com.chunkmapper.protoc.FileContainer.FileList.Builder.class);
    }

    public static com.google.protobuf.Parser<FileList> PARSER =
        new com.google.protobuf.AbstractParser<FileList>() {
      public FileList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileList> getParserForType() {
      return PARSER;
    }

    // repeated .FileInfo files = 1;
    public static final int FILES_FIELD_NUMBER = 1;
    private java.util.List<com.chunkmapper.protoc.FileContainer.FileInfo> files_;
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    public java.util.List<com.chunkmapper.protoc.FileContainer.FileInfo> getFilesList() {
      return files_;
    }
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    public java.util.List<? extends com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder> 
        getFilesOrBuilderList() {
      return files_;
    }
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    public int getFilesCount() {
      return files_.size();
    }
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    public com.chunkmapper.protoc.FileContainer.FileInfo getFiles(int index) {
      return files_.get(index);
    }
    /**
     * <code>repeated .FileInfo files = 1;</code>
     */
    public com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder getFilesOrBuilder(
        int index) {
      return files_.get(index);
    }

    private void initFields() {
      files_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getFilesCount(); i++) {
        if (!getFiles(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < files_.size(); i++) {
        output.writeMessage(1, files_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < files_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, files_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.chunkmapper.protoc.FileContainer.FileList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.chunkmapper.protoc.FileContainer.FileList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.chunkmapper.protoc.FileContainer.FileList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code FileList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.chunkmapper.protoc.FileContainer.FileListOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.chunkmapper.protoc.FileContainer.internal_static_FileList_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.chunkmapper.protoc.FileContainer.internal_static_FileList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.chunkmapper.protoc.FileContainer.FileList.class, com.chunkmapper.protoc.FileContainer.FileList.Builder.class);
      }

      // Construct using com.chunkmapper.protoc.FileContainer.FileList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFilesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (filesBuilder_ == null) {
          files_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          filesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.chunkmapper.protoc.FileContainer.internal_static_FileList_descriptor;
      }

      public com.chunkmapper.protoc.FileContainer.FileList getDefaultInstanceForType() {
        return com.chunkmapper.protoc.FileContainer.FileList.getDefaultInstance();
      }

      public com.chunkmapper.protoc.FileContainer.FileList build() {
        com.chunkmapper.protoc.FileContainer.FileList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.chunkmapper.protoc.FileContainer.FileList buildPartial() {
        com.chunkmapper.protoc.FileContainer.FileList result = new com.chunkmapper.protoc.FileContainer.FileList(this);
        int from_bitField0_ = bitField0_;
        if (filesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            files_ = java.util.Collections.unmodifiableList(files_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.files_ = files_;
        } else {
          result.files_ = filesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.chunkmapper.protoc.FileContainer.FileList) {
          return mergeFrom((com.chunkmapper.protoc.FileContainer.FileList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.chunkmapper.protoc.FileContainer.FileList other) {
        if (other == com.chunkmapper.protoc.FileContainer.FileList.getDefaultInstance()) return this;
        if (filesBuilder_ == null) {
          if (!other.files_.isEmpty()) {
            if (files_.isEmpty()) {
              files_ = other.files_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFilesIsMutable();
              files_.addAll(other.files_);
            }
            onChanged();
          }
        } else {
          if (!other.files_.isEmpty()) {
            if (filesBuilder_.isEmpty()) {
              filesBuilder_.dispose();
              filesBuilder_ = null;
              files_ = other.files_;
              bitField0_ = (bitField0_ & ~0x00000001);
              filesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFilesFieldBuilder() : null;
            } else {
              filesBuilder_.addAllMessages(other.files_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getFilesCount(); i++) {
          if (!getFiles(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.chunkmapper.protoc.FileContainer.FileList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.chunkmapper.protoc.FileContainer.FileList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .FileInfo files = 1;
      private java.util.List<com.chunkmapper.protoc.FileContainer.FileInfo> files_ =
        java.util.Collections.emptyList();
      private void ensureFilesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          files_ = new java.util.ArrayList<com.chunkmapper.protoc.FileContainer.FileInfo>(files_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.chunkmapper.protoc.FileContainer.FileInfo, com.chunkmapper.protoc.FileContainer.FileInfo.Builder, com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder> filesBuilder_;

      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public java.util.List<com.chunkmapper.protoc.FileContainer.FileInfo> getFilesList() {
        if (filesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(files_);
        } else {
          return filesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public int getFilesCount() {
        if (filesBuilder_ == null) {
          return files_.size();
        } else {
          return filesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public com.chunkmapper.protoc.FileContainer.FileInfo getFiles(int index) {
        if (filesBuilder_ == null) {
          return files_.get(index);
        } else {
          return filesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder setFiles(
          int index, com.chunkmapper.protoc.FileContainer.FileInfo value) {
        if (filesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilesIsMutable();
          files_.set(index, value);
          onChanged();
        } else {
          filesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder setFiles(
          int index, com.chunkmapper.protoc.FileContainer.FileInfo.Builder builderForValue) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          files_.set(index, builderForValue.build());
          onChanged();
        } else {
          filesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder addFiles(com.chunkmapper.protoc.FileContainer.FileInfo value) {
        if (filesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilesIsMutable();
          files_.add(value);
          onChanged();
        } else {
          filesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder addFiles(
          int index, com.chunkmapper.protoc.FileContainer.FileInfo value) {
        if (filesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilesIsMutable();
          files_.add(index, value);
          onChanged();
        } else {
          filesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder addFiles(
          com.chunkmapper.protoc.FileContainer.FileInfo.Builder builderForValue) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          files_.add(builderForValue.build());
          onChanged();
        } else {
          filesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder addFiles(
          int index, com.chunkmapper.protoc.FileContainer.FileInfo.Builder builderForValue) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          files_.add(index, builderForValue.build());
          onChanged();
        } else {
          filesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder addAllFiles(
          java.lang.Iterable<? extends com.chunkmapper.protoc.FileContainer.FileInfo> values) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          super.addAll(values, files_);
          onChanged();
        } else {
          filesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder clearFiles() {
        if (filesBuilder_ == null) {
          files_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          filesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public Builder removeFiles(int index) {
        if (filesBuilder_ == null) {
          ensureFilesIsMutable();
          files_.remove(index);
          onChanged();
        } else {
          filesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public com.chunkmapper.protoc.FileContainer.FileInfo.Builder getFilesBuilder(
          int index) {
        return getFilesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder getFilesOrBuilder(
          int index) {
        if (filesBuilder_ == null) {
          return files_.get(index);  } else {
          return filesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public java.util.List<? extends com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder> 
           getFilesOrBuilderList() {
        if (filesBuilder_ != null) {
          return filesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(files_);
        }
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public com.chunkmapper.protoc.FileContainer.FileInfo.Builder addFilesBuilder() {
        return getFilesFieldBuilder().addBuilder(
            com.chunkmapper.protoc.FileContainer.FileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public com.chunkmapper.protoc.FileContainer.FileInfo.Builder addFilesBuilder(
          int index) {
        return getFilesFieldBuilder().addBuilder(
            index, com.chunkmapper.protoc.FileContainer.FileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .FileInfo files = 1;</code>
       */
      public java.util.List<com.chunkmapper.protoc.FileContainer.FileInfo.Builder> 
           getFilesBuilderList() {
        return getFilesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.chunkmapper.protoc.FileContainer.FileInfo, com.chunkmapper.protoc.FileContainer.FileInfo.Builder, com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder> 
          getFilesFieldBuilder() {
        if (filesBuilder_ == null) {
          filesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.chunkmapper.protoc.FileContainer.FileInfo, com.chunkmapper.protoc.FileContainer.FileInfo.Builder, com.chunkmapper.protoc.FileContainer.FileInfoOrBuilder>(
                  files_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          files_ = null;
        }
        return filesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:FileList)
    }

    static {
      defaultInstance = new FileList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:FileList)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_FileInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_FileInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_FileList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_FileList_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030PATH/FileContainer.proto\"(\n\010FileInfo\022\016" +
      "\n\006parent\030\001 \002(\t\022\014\n\004file\030\002 \002(\t\"$\n\010FileList" +
      "\022\030\n\005files\030\001 \003(\0132\t.FileInfoB\030\n\026com.chunkm" +
      "apper.protoc"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_FileInfo_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_FileInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_FileInfo_descriptor,
              new java.lang.String[] { "Parent", "File", });
          internal_static_FileList_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_FileList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_FileList_descriptor,
              new java.lang.String[] { "Files", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
